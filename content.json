{"posts":[{"title":"700余本免费中文编程教程电子书汇总 —— 程序员开发入门学习提高必备电子书资源搜集汇总","text":"转载自 免费的编程中文书籍索引 编程就像是现代的炼金术，可以凭创意造出很多神奇的东西，也能为人类带来生产力和效率的提升。而对个人，学习编程不仅能增强逻辑思维，同时也能开拓视野。所以趁着放假学习一下编程是极好的。而程序开发入门，除了购买计算机书籍或看视频教程之外，网上也有很多免费教程资源。但是，在网上找编程学习资料最大的问题就是太过分散，不够系统全面，所以今天给大家推荐一个整理得非常好的「免费中文编程教程与书籍大全」。 免费计算机编程类中文教程电子书汇总：这个「免费中文编程书籍索引」可以说是收集了大量高质量的免费中文计算机类教程电子书，资源非常丰富，包含了各种编程语言如：Python、PHP、Swift、C++、Java、JavaScript、CSS、HTML、Ruby、Go ……等等。 此外还包括了 Android / iOS 移动端 APP 开发、WEB 前端 / 后端开发、服务器配置、Linux 操作系统、Shell 脚本编程、数据库、设计模式、版本控制、HTTP 原理，各种计算机技术理论/读书笔记等。 这些免费学习资料和教程基本完全覆盖了目前计算机程序开发和编程语言的所有方向，有教程也有文档手册，收录得非常全面，而且都是免费的，绝对是值得每一位有心学习编程技术和打算进入程序员行列的朋友收藏和阅读。 免费编程教程总目录如下：由于内容较多，大家可以善用浏览器的 CTRL+F 进行关键字搜索。 编程语言类教程： 编程语言类教程 Android APP AWK C/C++ C# Clojure CSS/HTML Dart Elixir Erlang Fortran Go Groovy Haskell iOS Java JavaScript Kotlin LaTeX LISP Lua OCaml Perl PHP Prolog Python R Ruby Rust Scala Shell Swift 计算机相关教程 (非语言类) 计算机相关教程 操作系统 智能系统 分布式系统 编译原理 函数式概念 计算机图形学 WEB服务器 版本控制 编辑器 NoSQL PostgreSQL MySQL 管理和监控 项目相关 设计模式 Web 大数据 编程艺术 其它 Android Android Design(中文版) Google Material Design 繁体中文版 (译本一 译本二) Material Design 中文版 Google Android官方培训课程中文版 Android学习之路 Android开发技术前线(android-tech-frontier) Point-of-Android Android 一些重要知识点解析整理 Android6.0新特性详解 APP Apache Cordova 开发指南 AWK awk程序设计语言 awk中文指南 C/C++ C/C++ 中文参考手册 C 语言编程透视 C++ 并发编程指南 Linux C编程一站式学习 CGDB中文手册 100个gdb小技巧 100个gcc小技巧 ZMQ 指南 How to Think Like a Computer Scientist (中英文版) 跟我一起写Makefile(PDF) GNU make中文手册 GNU make 指南 Google C++ 风格指南 C/C++ Primer (by @andycai) 简单易懂的C魔法 C++ FAQ LITE(中文版) C++ Primer 5th Answers C++ 并发编程(基于C++11) QT 教程 DevBean的《Qt学习之路2》(Qt5) C++ Template 进阶指南 libuv中文教程 Boost 库中文教程 笨办法学C 高速上手 C++11/14/17 C# MSDN C# 中文文档 .NET 类库参考 ASP.NET MVC 5 入门指南 超全面的 .NET GDI+ 图形图像编程教程 .NET控件开发基础 .NET开发要点精讲（初稿） Clojure Clojure入门教程 CSS/HTML 学习CSS布局 通用 CSS 笔记、建议与指导 CSS参考手册 Emmet 文档 前端代码规范 (腾讯 AlloyTeam 团队) HTML和CSS编码规范 Sass Guidelines 中文 CSS3 Tutorial 《CSS3 教程》 MDN HTML 中文文档 MDN CSS 中文文档 Dart Dart 语言导览 Elixir Elixir编程入门 Erlang 21天学通Erlang Fortran Fortran77和90/95编程入门 Go Go编程基础 Go入门指南 学习Go语言 Go Web 编程 (此书已经出版，希望开发者们去购买，支持作者的创作) Go实战开发 (当我收录此项目时，作者已经写完第三章，如果读完前面章节觉得有帮助，可以给作者捐赠，以鼓励作者的继续创作) Network programming with Go 中文翻译版本 Effective Go Go 语言标准库 Golang标准库文档 Revel 框架手册 Java程序员的Golang入门指南 Go命令教程 Go语言博客实践 Go 官方文档翻译 深入解析Go Go语言圣经(中文版) (GitBook) Groovy 实战 Groovy 系列 Haskell Real World Haskell 中文版 Haskell趣学指南 iOS iOS开发60分钟入门 iOS7人机界面指南 Google Objective-C Style Guide 中文版 iPhone 6 屏幕揭秘 Apple Watch开发初探 马上着手开发 iOS 应用程序 网易斯坦福大学公开课：iOS 7应用开发字幕文件 Java Apache Shiro 用户指南 Jersey 2.x 用户指南 Spring Framework 4.x参考文档 Spring Boot参考指南 (翻译中) MyBatis中文文档 MyBatis Generator 中文文档 用jersey构建REST服务 Activiti 5.x 用户指南 Google Java编程风格指南 Netty 4.x 用户指南 Netty 实战(精髓) REST 实战 Java 编码规范 Apache MINA 2 用户指南 H2 Database 教程 Java Servlet 3.1 规范 JSSE 参考指南 Java开源实现及最佳实践 Java 编程要点 Think Java Java 8 简明教程 On Java 8 中文版 (翻译中) JavaScript 现代 Javascript 教程 Google JavaScript 代码风格指南 Google JSON 风格指南 Airbnb JavaScript 规范 JavaScript 标准参考教程（alpha） Javascript编程指南 (源码) javascript 的 12 个怪癖 JavaScript 秘密花园 JavaScript核心概念及实践 (PDF) (此书已由人民邮电出版社出版发行，但作者依然免费提供PDF版本，希望开发者们去购买，支持作者) 《JavaScript 模式》 “JavaScript patterns”中译本 命名函数表达式探秘 (注:原文由为之漫笔翻译，原始地址无法打开，所以此处地址为我博客上的备份) 学用 JavaScript 设计模式 (开源中国) 深入理解JavaScript系列 ECMAScript 5.1 中文版 ECMAScript 6 入门 (作者：阮一峰) JavaScript Promise迷你书 You-Dont-Know-JS (深入JavaScript语言核心机制的系列图书) JavaScript 教程 廖雪峰 MDN JavaScript 中文文档 jQuery jQuery 解构 简单易懂的JQuery魔法 How to write jQuery plugin You Don’t Need jQuery 如何实现一个类jQuery？ Node.js Node入门 七天学会NodeJS Nodejs Wiki Book (繁体中文) express.js 中文文档 koa 中文文档 一起学koa 使用 Express + MongoDB 搭建多人博客 Express框架 Node.js 包教不包会 Learn You The Node.js For Much Win! (中文版) Node debug 三法三例 nodejs中文文档 orm2 中文文档 一起学 Node.js underscore.js Underscore.js中文文档 backbone.js backbone.js中文文档 backbone.js入门教程 (PDF) Backbone.js入门教程第二版 Developing Backbone.js Applications(中文版) AngularJS AngularJS最佳实践和风格指南 AngularJS中译本 AngularJS入门教程 构建自己的AngularJS 在Windows环境下用Yeoman构建AngularJS项目 Zepto.js Zepto.js 中文文档 Sea.js Hello Sea.js React.js React 学习之道 React.js 小书 React.js 中文文档 React webpack-cookbook React 入门教程 React Native 中文文档(含最新Android内容) Learn React &amp; Webpack by building the Hacker News front page impress.js impress.js的中文教程 CoffeeScript CoffeeScript Cookbook The Little Book on CoffeeScript中文版 CoffeeScript 编码风格指南 TypeScipt TypeScript Handbook ExtJS Ext4.1.0 中文文档 Meteor Discover Meteor Meteor 中文文档 Angular-Meteor 中文教程 Chrome扩展及应用开发 Kotlin developing-android-apps-with-kotlin LaTeX 一份其实很短的 LaTeX 入门文档 一份不太简短的 LATEX 2ε 介绍 （PDF版） LISP Common Lisp ANSI Common Lisp 中文翻譯版 On Lisp 中文翻译版本 Scheme Yet Another Scheme Tutorial Scheme入门教程 Scheme语言简明教程 Racket Racket book Lua Lua编程入门 Lua 5.1 参考手册 中文翻译 Lua 5.3 参考手册 中文翻译 Lua源码欣赏 OCaml Real World OCaml Perl Modern Perl 中文版 Perl 程序员应该知道的事 PHP PHP 官方手册 PHP调试技术手册(PDF) PHP之道：php-the-right-way (@wulijun版 PHPHub版) PHP 最佳实践 PHP 开发者实践 深入理解PHP内核 PHP扩展开发及内核应用 Laravel5.1 中文文档 Laravel 5.1 LTS 速查表 Symfony2 Cookbook 中文版(版本 2.7.0 LTS) Symfony2中文文档 (未译完) YiiBook几本Yii框架的在线教程 深入理解 Yii 2.0 Yii 框架中文文檔 简单易懂的PHP魔法 swoole文档及入门教程 Composer 中文网 Slim 中文文档 Lumen 中文文档 PHPUnit 中文文档 Prolog 笨办法学Prolog Python 廖雪峰 Python 2.7 中文教程 廖雪峰 Python 3 中文教程 简明Python教程 简明 Python 教程(Python 3) 零基础学 Python 第一版 零基础学 Python 第二版 可爱的 Python Python 2.7 官方教程中文版 Python 3.3 官方教程中文版 Python Cookbook 中文版 Python3 Cookbook 中文版 深入 Python 深入 Python 3 PEP8 Python代码风格规范 Google Python 风格指南 中文版 Python入门教程 (PDF) 笨办法学 Python (PDF EPUB) Python自然语言处理中文版 （感谢陈涛同学的翻译） Python 绘图库 matplotlib 官方指南中文翻译 Scrapy 0.25 文档 ThinkPython ThinkPython 2ed Python快速教程 Python 正则表达式操作指南 python初级教程：入门详解 Twisted 与异步编程入门 TextGrocery 中文 API ( 基于svm算法的一个短文本分类 Python 库 ) Requests: HTTP for Humans Pillow 中文文档 PyMOTW 中文版 Python 官方文档中文版 Fabric 中文文档 Beautiful Soup 4.2.0 中文文档 Python 中的 Socket 编程 用Python做科学计算 Sphinx 中文文档 精通 Python 设计模式 python 安全编程教程 程序设计思想与方法 知乎周刊·编程小白学Python Scipy 讲义 Python 学习笔记 基础篇 Python 学习笔记 模块篇 Python 标准库 中文版 Python进阶 Python 核心编程 第二版 CPyUG译 Python最佳实践指南 Python 精要教程 Python 量化交易教程 Django Django 1.5 文档中文版 正在翻译中 Django 2.0 文档中文版 Django 最佳实践 Django 2.1 搭建个人博客教程 ( 编写中 ) Django搭建简易博客教程 The Django Book 中文版 Django 设计模式与最佳实践 Django 网站开发 Cookbook Django Girls 學習指南 Flask Flask 文档中文版 Jinja2 文档中文版 Werkzeug 文档中文版 Flask之旅 Flask 扩展文档汇总 Flask 大型教程 SQLAlchemy 中文文档 web.py web.py 0.3 新手指南 Web.py Cookbook 简体中文版 Tornado Introduction to Tornado 中文翻译 Tornado源码解析 Tornado 4.3 文档中文版 R R语言忍者秘笈 Ruby Ruby 风格指南 Rails 风格指南 笨方法學 Ruby Ruby on Rails 指南 Ruby on Rails 实战圣经 Ruby on Rails Tutorial 原书第 3 版 (本书网页版免费，下载版需购买) Rails 实践 Rails 5 开发进阶(Beta) Rails 102 编写Ruby的C拓展 Ruby 源码解读 Ruby中的元编程 Rust Rust编程语言 中文翻译 Rust Primer Scala Scala课堂 (Twitter的Scala中文教程) Effective Scala(Twitter的Scala最佳实践的中文翻译) Scala指南 Shell Shell脚本编程30分钟入门 Bash脚本15分钟进阶教程 Linux工具快速教程 shell十三问 Shell编程范例 Swift The Swift Programming Language 中文版 Swift 语言指南 Stanford 公开课，Developing iOS 8 Apps with Swift 字幕翻译文件 C4iOS – COSMOS 读书笔记及其它 编译原理（紫龙书）中文第2版习题答案 把《编程珠玑》读薄 [Effective C++读书笔记](https://github.com/XiaolongJason/ReadingNote/blob/master/Effective C%2B%2B/Effective C%2B%2B.md) Golang 学习笔记、Python 学习笔记、C 学习笔记 (PDF) Jsoup 学习笔记 学习笔记: Vim、Python、memcached 图灵开放书翻译计划–C++、Python、Java等 蒂姆·奥莱利随笔 （由译言网翻译，电子版免费） SICP 解题集 精彩博客集合 中文文案排版指北 Standard C 语言标准函数库速查 (Cheat Sheet) Git Cheatsheet Chs GitBook简明教程 JavaScript语言精粹 制造开源软件 提问的智慧 Markdown 入门参考 AsciiDoc简明指南 背包问题九讲 老齐的技术资料 前端技能汇总 借助开源项目，学习软件开发 前端工作面试问题 leetcode/lintcode题解/算法学习笔记 前端开发笔记本 LeetCode题解 《不可替代的团队领袖培养计划》 操作系统 开源世界旅行手册 鸟哥的 Linux 私房菜 Linux 就该这么学 The Linux Command Line (中英文版) Linux 设备驱动 (第三版) 深入分析Linux内核源码 UNIX TOOLBOX Docker中文指南 Docker —— 从入门到实践 Docker入门实战 Docker Cheat Sheet FreeRADIUS新手入门 Mac 开发配置手册 FreeBSD 使用手册 Linux 命令行(中文版) Linux 构建指南 Linux工具快速教程 Linux Documentation (中文版) 嵌入式 Linux 知识库 (eLinux.org 中文版) 理解Linux进程 命令行的艺术 SystemTap新手指南 操作系统思考 智能系统 一步步搭建物联网系统 分布式系统 走向分布式 编译原理 《计算机程序的结构和解释》公开课 翻译项目 函数式概念 傻瓜函数编程 计算机图形学 OpenGL 教程 WebGL自学网 《Real-Time Rendering 3rd》提炼总结 WEB服务器 Nginx开发从入门到精通 (淘宝团队出品) Nginx教程从入门到精通(PDF版本，运维生存时间出品) OpenResty最佳实践 Apache 中文手册 版本控制 Git教程 （本文由 廖雪峰 创作） git – 简易指南 猴子都能懂的GIT入门 Git 参考手册 Pro Git Pro Git 中文版 (整理在gitbook上) Git Magic GotGitHub Git权威指南 Git Community Book 中文版 Mercurial 使用教程 HgInit (中文版) 沉浸式学 Git Git-Cheat-Sheet （感谢 @flyhigher139 翻译了中文版） GitHub秘籍 GitHub帮助文档 git-flow 备忘清单 svn 手册 GitHub漫游指南 编辑器 exvim–vim 改良成IDE项目 笨方法学Vimscript 中译本 Vim中文文档 所需即所获：像 IDE 一样使用 vim vim 实操教程 Atom飞行手册中文版 Markdown·简单的世界 一年成为 Emacs 高手 Emacs 生存指南 Atom官方手册 NoSQL NoSQL数据库笔谈 Redis 设计与实现 Redis 命令参考 带有详细注释的 Redis 3.0 代码 带有详细注释的 Redis 2.6 代码 The Little MongoDB Book The Little Redis Book Neo4j 简体中文手册 v1.8 Neo4j .rb 中文資源 Disque 使用教程 Apache Spark 设计与实现 PostgreSQL PostgreSQL 8.2.3 中文文档 PostgreSQL 9.3.1 中文文档 PostgreSQL 9.5.3 中文文档 MySQL MySQL索引背后的数据结构及算法原理 21分钟MySQL入门教程 管理和监控 ELKstack 中文指南 Mastering Elasticsearch(中文版) ElasticSearch 权威指南 Elasticsearch 权威指南（中文版） Logstash 最佳实践 Puppet 2.7 Cookbook 中文版 项目相关 持续集成（第二版） (译言网) 让开发自动化系列专栏 追求代码质量 selenium 中文文档 Selenium Webdriver 简易教程 Joel谈软件 約耳談軟體(Joel on Software) Gradle 2 用户指南 Gradle 中文使用文档 编码规范 开源软件架构 GNU make 指南 GNU make 中文手册 The Twelve-Factor App 设计模式 图说设计模式 史上最全设计模式导学目录 design pattern 包教不包会 设计模式 Java 版 Web 关于浏览器和网络的 20 项须知 浏览器开发工具的秘密 Chrome 开发者工具中文手册 Chrome扩展开发文档 Grunt中文文档 gulp中文文档 Gulp 入门指南 移动Web前端知识库 正则表达式30分钟入门教程 前端开发体系建设日记 移动前端开发收藏夹 JSON风格指南 HTTP 接口设计指北 前端资源分享（一） 前端资源分享（二） 前端代码规范 及 最佳实践 前端开发者手册 前端工程师手册 w3school教程整理 Wireshark用户手册 一站式学习Wireshark HTTP 下午茶 HTTP/2.0 中文翻译 RFC 7540 – HTTP/2 中文翻译版 http2讲解 3 Web Designs in 3 Weeks 站点可靠性工程 大数据 大数据/数据挖掘/推荐系统/机器学习相关资源 面向程序员的数据挖掘指南 大型集群上的快速和通用数据处理架构 数据挖掘中经典的算法实现和详细的注释 Spark 编程指南简体中文版 编程艺术 程序员编程艺术 每个程序员都应该了解的内存知识(译)【第一部分】 取悦的工序：如何理解游戏 (豆瓣阅读，免费书籍) 其它 OpenWrt智能、自动、透明那个啥路由器教程 SAN 管理入门系列 Sketch 中文手册 深入理解并行编程 程序员的自我修养 Growth: 全栈增长工程师指南 这些教程有适合新手入门的，也有适合有经验的程序员进阶学习提高的，都是比较有价值的资料，收集得也比较全面，值得大家收藏起来日后学习备查。","link":"/abbrlink/b002d8f8.html"},{"title":"Adobe CS6系列软件","text":"Adobe CS6全系列下载「Win」Adobe Fireworks CS6 网盘特征 网盘地址 提取码 百度云 https://pan.baidu.com/s/1bUxtV6S4CVm4wcddIZ4FKQ fjx8 「Mac」Adobe Fireworks CS6 网盘特征 网盘地址 提取码 百度云 https://pan.baidu.com/s/1fZEcZfSBF_ZnBr2O_-njFA sre8 「Win+Mac」Adobe CS6 嬴政天下版集成产品 Adobe Acrobat DC 2019 Adobe After Effects 2019 Adobe Animate 2019 Adobe Audition 2019 Adobe Bridge CC 2019 Adobe Character Animator 2019 Adobe Dimension 2 Adobe Dreamweaver 2019 Adobe Illustrator 2019 Adobe InCopy 2019 Adobe InDesign 2019 Adobe Lightroom Classic CC 8 Adobe Media Encoder 2019 Adobe Photoshop CC 2019 Adobe Prelude 2019 Adobe Premiere Pro 2019 Adobe XD Adobe Creative Cloud Creative Cloud Sync Adobe Creative Cloud Experience Creative Cloud Libraries Adobe Camera Raw 下载地址 解压码：**@vposy** 网盘特征 网盘地址 提取码 百度云 https://pan.baidu.com/s/1YAnqW363Q6Oyauhoqc13VQ bgs5 天翼云 http://cloud.189.cn/t/zIrMJnJ7jaiy oww2 百度云 https://pan.baidu.com/s/10Pz3hXzSihEh9bjRcM5TbQ m9nq 百度云 https://pan.baidu.com/s/1QCAAeEa_GS_71sQJXoavWA 2yG3","link":"/abbrlink/ec2c6733.html"},{"title":"Fences破解版","text":"当前版本为 3.0.9.11版 软件介绍Stardock Fences 是著名的 Stardock 公司新推出的一款软件，用来分类和组织桌面上的图标。它可以将不同的图标放到不同的半透明“容器”当中，你还可以移动和拉伸这个“容器”。这样将图标分类以后，你的桌面再也不会看起来一团糟了。 fences也被称为栅栏桌面，是著名的Stardock公司推出的一款软件，由该公司的首席技术构架师Jeff Bargmann开发的，用来分类和组织桌面上的图标一款软件。 主要特征 新！在高DPI的现代显示器上使用围栏。 创建阴影区域以整理桌面。 新！在Windows 10上模糊栅栏后面的壁纸。 新！将围栏卷起来到标题栏，以获得更清洁的桌面。 双击桌面以隐藏或显示图标。 定义规则以组织桌面图标。 在多页围栏之间滑动。 从任何文件夹创建一个桌面门户。 新！从围栏内浏览文件夹结构。 新！Windows 10兼容性。 下载地址蓝奏云","link":"/abbrlink/42e9c371.html"},{"title":"GitHub桌面版 简体中文汉化","text":"GitHub桌面版 简体中文汉化 本补丁的作者是Githubの @lkyero 保留了部分英文 汉化还在继续 一键替换在 汉化补丁页面 下载压缩包，解压后 运行程序：一键汉化并自动备份的原文件。 完成后界面","link":"/abbrlink/766ab25f.html"},{"title":"Hexo+Github博客搭建完全教程","text":"转载自 洪卫の博客 版权归作者所有 阅读须知 注意，这篇文章篇幅较长，主要针对新手，每一步很详细，所以可能会显得比较啰嗦，所以建议基础比较好小伙伴根据目录选择自己感兴趣的部分跳着看，不要文章没看上来先喷一下！谢谢⊙o⊙⊙o⊙。 教程内容随意复制使用，引用的话请加一个参考链接，谢谢！ 前言本博客基于Hexo，所以首先要了解一下我们搭建博客所要用到的框架。Hexo是高效的静态网站生成框架，它基于 Node.js，快速，简单且功能强大，是搭建博客的首选框架。大家可以进入hexo官网进行详细查看，因为 Hexo的创建者是台湾人，对中文的支持很友好，可以选择中文进行查看。通过 Hexo，你可以直接使用 Markdown语法来撰写博客。相信很多小伙伴写工程都写过 README.md文件吧，对，就是这个格式的！写完后只需两三条命令即可将生成的网页上传到 github或者 coding等代码管理托管平台，然后别人就可以浏览你的博客网页啦。是不是很简单？你无需关心网页源代码的具体生成细节，只需要用心写好你的博客文章内容就行了 简单总结：Hexo, 产品成熟，使用简单，功能强大，有丰富的各种插件资源；但，像发布后台、站内搜索，评论系统类似诉求，虽然有对应的工具，但也需要自己折腾，后续我们一步一步介绍。教程大致分三个部分， 第一部分：hexo的初级搭建还有部署到 github page上，以及个人域名的绑定。 第二部分：hexo的基本配置，更换主题，实现多终端工作，以及在 coding page部署实现国内外分流 第三部分：hexo添加各种功能，包括搜索的 SEO，阅读量统计，访问量统计和评论系统等。 第一部分 搭建 hexo的初级搭建还有部署到 github page上，以及个人域名的绑定。 Hexo搭建步骤 1.安装 Git 2.安装 Node.js 3.安装 Hexo 4.GitHub创建个人仓库 5.生成 SSH添加到 GitHub 6.将 hexo部署到 GitHub 7.设置个人域名 8.发布文章 1. 安装Git 为了把本地的网页文件上传到 github上面去，需要用到工具———Git[下载地址]。Git是目前世界上最先进的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。Git非常强大，建议每个人都去了解一下。廖雪峰老师的 Git教程写的非常好，大家可以看一下。Git教程 windows：到 git官网上下载 .exe文件,Download git,安装选项还是全部默认，只不过最后一步添加路径时选择 Use Git from the Windows Command Prompt，这样我们就可以直接在命令提示符里打开 git了。 顺便说一下，windows在 git安装完后，就可以直接使用 git bash来敲命令行了，不用自带的 cmd，cmd有点难用。 linux：对 linux来说实在是太简单了，因为最早的 git就是在 linux上编写的，只需要一行代码 1sudo apt-get install git 安装完成后在命令提示符中输入 git --version来查看一下版本验证是否安装成功。 2. 安装nodejs Hexo是基于 node.js编写的，所以需要安装一下 node.js和里面的 npm工具。 windows：下载稳定版或者最新版都可以Node.js，安装选项全部默认，一路点击 Next。最后安装好之后，按 Win+R打开命令提示符，输入 node -v和 npm -v，如果出现版本号，那么就安装成功了。 linux：命令行安装： 12sudo apt-get install nodejssudo apt-get install npm 不过不推荐命令行安装，有时候有问题，建议直接到官网去下载编译好的压缩文件，如下所示: 然后解压到你指定的文件夹即可，比如我解压到我系统的 /home/shw/MySoftwares目录下了，如图: 注意本压缩包是 .tar.xz格式的，需要两次解压 配置一下环境变量 1sudo vim /etc/profile 复制下面两行到刚打开的 profile文件最底部(注意 node的安装地址 /home/shw/MySoftwares/node-v12.8.0-linux-x64换成自己的)： 12export NODE_HOME=/home/shw/MySoftwares/node-v12.8.0-linux-x64export PATH=$PATH:$NODE_HOME/bin 保存后退出，再执行下面命令将环境变量生效： 1source /etc/profile 将目录软链接到全局环境下（命令后面的 /usr/local/bin/node是固定的） 12sudo ln -s /home/shw/MySoftwares/node-v12.8.0-linux-x64/node /usr/local/bin/nodesudo ln -s /home/shw/MySoftwares/node-v12.8.0-linux-x64/npm /usr/local/bin/npm 这样安装好了以后使用 npm安装的包(比如：ionic serve)，使用包的命令时可能会提示找不到命令，没关系，在用户目录下终端执行下面命令固定写法固定写法： 1echo -e &quot;export PATH=$(npm prefix -g)/bin:$PATH&quot; &gt;&gt; ~/.bashrc &amp;&amp; source ~/.bashrc 这样我们在所有用户下，都可以使用 npm，也可以使用 npm安装的包的命令。成功的将 nodejs安装并配置到全局环境下。 安装完后，打开命令行终端，输入: 12node -vnpm -v 检查一下有没有安装成功 添加国内镜像源如果没有梯子的话，可以使用阿里的国内镜像进行加速。 1npm config set registry https://registry.npm.taobao.org 3. 安装Hexo 前面 git和 nodejs安装好后，就可以安装 hexo了，你可以先创建一个文件夹 MyBlog，用来存放自己的博客文件，然后 cd到这个文件夹下（或者在这个文件夹下直接右键 git bash打开）。 比如我的博客文件都存放在 D:\\Study\\MyBlog目录下。 在该目录下右键点击 Git Bash Here，打开 git的控制台窗口，以后我们所有的操作都在 git控制台进行，就不用 Windows自带的 cmd了。 定位到该目录下，输入 npm install -g hexo-cli安装 Hexo。可能会有几个报错，无视它就行。 1npm install -g hexo-cli 安装完后输入 hexo -v验证是否安装成功。 至此 hexo就安装完了。 接下来初始化一下 hexo,即初始化我们的网站，输入 hexo init初始化文件夹 1hexo init MyBlog 这个 MyBlog可以自己取什么名字都行，然后，接着输入 npm install安装必备的组件。 12cd MyBlog //进入这个MyBlog文件夹npm install 新建完成后，指定文件夹 MyBlog目录下有： node_modules: 依赖包 public：存放生成的页面 scaffolds：生成文章的一些模板 source：用来存放你的文章 themes：主题** _config.yml: 博客的配置文件** 这样本地的网站配置也弄好啦，输入 hexo g生成静态网页，然后输入 hexo s打开本地服务器， 12hexo ghexo server(或者简写:hexo s）) 然后浏览器打开http://localhost:4000/，就可以看到我们的博客啦，效果如下： 按 ctrl+c关闭本地服务器。 4. 注册Github账号创建个人仓库 接下来就去注册一个 github账号，用来存放我们的网站。大多数小伙伴应该都有了吧，作为一个合格的程序猿（媛）还是要有一个的。 打开https://github.com/，新建一个项目仓库 New repository，如下所示： 然后如下图所示，输入自己的项目名字，后面一定要加 .github.io后缀，README初始化也要勾上。 要创建一个和你用户名相同的仓库，后面加 github.io 只有这样，将来要部署到 GitHub page的时候，才会被识别，也就是xxxx.github.io，其中xxx就是你注册 GitHub的用户名。 5. 生成SSH添加到GitHub 生成 SSH添加到 GitHub，连接 Github与本地。右键打开 git bash，然后输入下面命令： 12git config --global user.name &quot;yourname&quot;git config --global user.email &quot;youremail&quot; 这里的 yourname输入你的 GitHub用户名，youremail输入你 GitHub的邮箱。这样 GitHub才能知道你是不是对应它的账户。例如我的： 12git config --global user.name &quot;shw2018&quot;git config --global user.email &quot;hwsun@std.uestc.edu.cn&quot; 可以用以下两条，检查一下你有没有输对 12git config user.namegit config user.email 然后创建 SSH,一路回车 ssh，简单来讲，就是一个秘钥，其中，id_rsa是你这台电脑的私人秘钥，不能给别人看的，id_rsa.pub是公共秘钥，可以随便给别人看。把这个公钥放在 GitHub上，这样当你链接 GitHub自己的账户时，它就会根据公钥匹配你的私钥，当能够相互匹配时，才能够顺利的通过 git上传你的文件到 GitHub上。 1ssh-keygen -t rsa -C &quot;youremail&quot; 这个时候它会告诉你已经生成了 .ssh的文件夹。在你的电脑中找到这个文件夹。或者 git bash中输入 1cat ~/.ssh/id_rsa.pub 将输出的内容复制到框中，点击确定保存。 打开github，在头像下面点击 settings，再点击 SSH and GPG keys，新建一个 SSH，名字随便取一个都可以，把你的 id_rsa.pub里面的信息复制进去。如图： 在 git bash输入 ssh -T git@github.com，如果如下图所示，出现你的用户名，那就成功了。 6. 将hexo部署到GitHub 这一步，我们就可以将 hexo和 GitHub关联起来，也就是将 hexo生成的文章部署到 GitHub上，打开博客根目录下的 _config.yml文件，这是博客的配置文件，在这里你可以修改与博客配置相关的各种信息。 修改最后一行的配置： 1234deploy: type: git repository: https://github.com/shw2018/shw2018.github.io branch: master repository修改为你自己的 github项目地址即可，就是部署时，告诉工具，将生成网页通过 git方式上传到你对应的链接仓库中。 这个时候需要先安装 deploy-git ，也就是部署的命令,这样你才能用命令部署到 GitHub。 1npm install hexo-deployer-git --save 然后 123hexo cleanhexo generatehexo deploy 其中 hexo clean清除了你之前生成的东西，也可以不加。 hexo generate顾名思义，生成静态文章，可以用 hexo g缩写 ，hexo deploy部署文章，可以用 hexo d缩写 注意 deploy时可能要你输入 username和 password。 得到下图就说明部署成功了，过一会儿就可以在http://yourname.github.io 这个网站看到你的博客了！！ 7. 设置个人域名 现在你的个人网站的地址是 yourname.github.io，如果觉得这个网址逼格不太够，这就需要你设置个人域名了。但是需要花钱。 不过，这一步不是必要的，如果目前还不想买域名可以先跳过，继续看后面的，以后想买域名了在还看这块 首先你得购买一个专属域名，xx云都能买，看你个人喜好了。 这篇以腾讯云为例，腾讯云官网购买： 然后实名认证后进入腾讯云控制台，点云解析进去，找到你刚买的域名，点进去添加两条解析记录，如下图所示： 然后打开你的 github博客项目，点击 settings，拉到下面 Custom domain处，填上你自己的域名，保存： 这时候你的项目根目录应该会出现一个名为 CNAME的文件了。如果没有的话，打开你本地博客 /source目录，我的是 D:\\Study\\MyBlog\\source，新建 CNAME文件，注意没有后缀。然后在里面写上你的域名，保存。最后运行 hexo g、hexo d上传到 github。 过不了多久，再打开你的浏览器，输入你自己的专属域名，就可以看到搭建的网站啦！ 8. 写文章、发布文章 首先在博客根目录下右键打开 git bash，安装一个扩展 npm i hexo-deployer-git。 然后输入 hexo new post &quot;article title&quot;，新建一篇文章。 然后打开 D:\\Study\\MyBlog\\source\\_posts的目录，可以发现下面多了一个文件夹和一个 .md文件，一个用来存放你的图片等数据，另一个就是你的文章文件啦。你可以会直接在 vscode里面编写 markdown文件，可以实时预览，也可以用用其他编辑 md文件的软件的工具编写。编写完markdown文件后，根目录下输入 hexo g生成静态网页，然后输入 hexo s可以本地预览效果，最后输入 hexo d上传到 github上。这时打开你的 github.io主页就能看到发布的文章啦。 到这儿基本第一部分就完成了，已经完整搭建起一个比较简陋的个人博客了，接下来我们就可以对我们的博客进行个性化定制了。 第二部分 定制 我们要定制自己的博客的话，首先就要来了解一下 Hexo博客的一些目录和文件的作用，以及如何平滑更换漂亮的主题模板并加入自己的定制源代码实现个性化定制 1. Hexo相关目录文件1.1 博客目录构成介绍 从上图可以看出，博客的目录结构如下： 123456789101112- node_modules- public- scaffolds- source - _data - _posts - about - archives - categories - friends - tags- themes node_modules是 node.js各种库的目录，public是生成的网页文件目录，scaffolds里面就三个文件，存储着新文章和新页面的初始设置，source是我们最常用到的一个目录，里面存放着文章、各类页面、图像等文件，themes存放着主题文件，一般也用不到。 我们平时写文章只需要关注 source/_posts这个文件夹就行了。 1.2 hexo基本配置 在文件根目录下的 _config.yml，就是整个 hexo框架的配置文件了。可以在里面修改大部分的配置。详细可参考官方的配置描述。 1.2.1 网站 参数描述 title网站标题 subtitle网站副标题 description网站描述 author您的名字 language网站使用的语言 timezone网站时区。Hexo 默认使用您电脑的时区。时区列表。比如说：America/New_York, Japan, 和 UTC 。 其中，description主要用于 SEO，告诉搜索引擎一个关于您站点的简单描述，通常建议在其中包含您网站的关键词。author参数用于主题显示文章的作者。 1.2.2 网址 参数描述 url网址 root网站根目录 permalink文章的永久链接格式 permalink_defaults永久链接中各部分的默认值 在这里，你需要把 url改成你的网站域名。 permalink，也就是你生成某个文章时的那个链接格式。 比如我新建一个文章叫 temp.md，那么这个时候他自动生成的地址就是 http://yoursite.com/2018/09/05/temp。 以下是官方给出的示例，关于链接的变量还有很多，需要的可以去官网上查找 永久链接 。 参数结果:year/:month/:day/:title/2019/08/10/hello-world :year-:month-:day-:title.html 2019-08-10-hello-world.html :category/:titlefoo/bar/hello-world 再往下翻，中间这些都默认就好了。 1theme: landscap theme就是选择什么主题，也就是在 themes这个文件夹下，在官网上有很多个主题，默认给你安装的是 lanscape这个主题。当你需要更换主题时，在官网上下载，把主题的文件放在 themes文件夹下，再修改这个主题参数就可以了。 1.2.3 Front-matter Front-matter 是 md文件最上方以 ---分隔的区域，用于指定个别文件的变量，举例来说： 12title: Hexo+Github博客搭建记录date: 2019-08-10 21:44:44 下是预先定义的参数，您可在模板中使用这些参数值并加以利用。 参数描述 layout布局 title标题 date建立日期 updated更新日期 comments开启文章的评论功能 tags标签（不适用于分页）categories分类（不适用于分页）permalink覆盖文章网址 其中，分类和标签需要区别一下，分类具有顺序性和层次性，也就是说 Foo，Bar不等于 Bar，Foo；而标签没有顺序和层次。 12345678910111213141516171819---title: Hexo+Github博客搭建记录date: 2019-08-10 21:44:44author: 洪卫img: /medias/banner/7.jpgcoverImg: /medias/banner/7.jpgtop: truecover: truetoc: truepassword: 5f15b28ffe43f8be4f239bdd9b69af9d80dbafcb20a5f0df5d1677a120ae9110mathjax: truesummary: 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要tags:- Hexo- Github- 博客categories:- 软件安装与配置--- 1.2.4 layout（布局） 1.2.4.1 post 当你每一次使用代码 1hexo new XXX 它其实默认使用的是 post这个布局，也就是在 source文件夹下的 _post里面。 Hexo有三种默认布局：post、page和 draft，它们分别对应不同的路径，而您自定义的其他布局和 post相同，都将储存到 source/_posts文件夹。 而new这个命令其实是： 1hexo new [layout] &lt;title&gt; 只不过这个 layout默认是 post罢了。 1.2.4.2 page 如果你想另起一页，那么可以使用 1hexo new page newpage 系统会自动给你在 source文件夹下创建一个 newpage文件夹，以及 newpage文件夹中的 index.md，这样你访问的 newpage对应的链接就是http://xxx.xxx/newpage 1.2.4.3 draft draft是草稿的意思，也就是你如果想写文章，又不希望被看到，那么可以 1hexo new draft newdraft 这样会在 source/_draft中新建一个 newdraft.md文件，如果你的草稿文件写的过程中，想要预览一下，那么可以使用 1hexo server --draft 在本地端口中开启服务预览。 如果你的草稿文件写完了，想要发表到 post中， 1hexo publish draft newdraft 就会自动把 newdraft.md发送到 post中。 2. 更换主题 我们在了解 Hexo博客文件基础之后，知道主题文件就放在 themes文件下，那么我们就可以去Hexo官网下载喜欢的主题，复制进去然后修改参数即可。网上大多数主题都是github排名第一的 Next主题，但是我个人不是很喜欢，我在网上看到一个主题感觉还不错：hexo-theme-matery，地址在传送门。这个主题看着比较漂亮，并且响应式比较友好，点起来很舒服，功能也比较很多。 当然，人各有异，这个主题风格也不一定是你喜欢，那么你也可以跟着这教程类似的方法替换成你喜欢的就行了。 特性： 简单漂亮，文章内容美观易读 Material Design 设计 响应式设计，博客在桌面端、平板、手机等设备上均能很好的展现 首页轮播文章及每天动态切换 Banner 图片 瀑布流式的博客文章列表（文章无特色图片时会有 24 张漂亮的图片代替） 时间轴式的归档页 词云的标签页和雷达图的分类页 丰富的关于我页面（包括关于我、文章统计图、我的项目、我的技能、相册等） 可自定义的数据的友情链接页面 支持文章置顶和文章打赏 支持 MathJax TOC 目录 可设置复制文章内容时追加版权信息 可设置阅读文章时做密码验证 Gitalk、Gitment、Valine 和 Disqus 评论模块（推荐使用 Gitalk） 集成了不蒜子统计、谷歌分析（Google Analytics）和文章字数统计等功能 支持在首页的音乐播放和视频播放功能 他的介绍文档写得非常的详细，还有中英文两个版本。效果图如下： 首先先按照文档教程安装一遍主题，然后是可以正常打开的，如果你是一般使用的话，基本没啥问题了。不过有些地方有些地方可以根据你自己的习惯和喜好修改一下， 下面记录一下我这个博客修改了的一些地方。 2.1 新建文章模板修改 首先为了新建文章方便，我们可以修改一下文章模板，建议将 /scaffolds/post.md修改为如下代码： 123456789101112131415---title: {{ title }}date: {{ date }}author: img: coverImg: top: falsecover: falsetoc: truemathjax: falsepassword:summary:tags:categories:--- 这样新建文章后 一些 Front-matter参数不用你自己补充了，修改对应信息就可以了。 2.2 添加404页面 原来的主题没有 404页面，我们加一个。首先在 /source/目录下新建一个 404.md，内容如下： 12345title: 404date: 2019-08-5 16:41:10type: &quot;404&quot;layout: &quot;404&quot;description: &quot;Oops～，我崩溃了！找不到你想要的页面 :(&quot; 然后在 /themes/matery/layout/目录下新建一个 404.ejs文件，内容如下： 12345678910111213141516171819202122232425262728&lt;style type=&quot;text/css&quot;&gt; /* don't remove. */ .about-cover { height: 75vh; }&lt;/style&gt;&lt;div class=&quot;bg-cover pd-header about-cover&quot;&gt; &lt;div class=&quot;container&quot;&gt; &lt;div class=&quot;row&quot;&gt; &lt;div class=&quot;col s10 offset-s1 m8 offset-m2 l8 offset-l2&quot;&gt; &lt;div class=&quot;brand&quot;&gt; &lt;div class=&quot;title center-align&quot;&gt; 404 &lt;/div&gt; &lt;div class=&quot;description center-align&quot;&gt; &lt;%= page.description %&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;script&gt; // 每天切换 banner 图. Switch banner image every day. $('.bg-cover').css('background-image', 'url(/medias/banner/' + new Date().getDay() + '.jpg)');&lt;/script&gt; 2.3“关于”页面增加简历（可选） 修改 /themes/matery/layout/about.ejs，找到 标签，然后找到它对应的标签，接在后面新增一个 card，语句如下： 123456789101112&lt;div class=&quot;card&quot;&gt; &lt;div class=&quot;card-content&quot;&gt; &lt;div class=&quot;card-content article-card-content&quot;&gt; &lt;div class=&quot;title center-align&quot; data-aos=&quot;zoom-in-up&quot;&gt; &lt;i class=&quot;fa fa-address-book&quot;&gt;&lt;/i&gt; &lt;%- __('myCV') %&gt; &lt;/div&gt; &lt;div id=&quot;articleContent&quot; data-aos=&quot;fade-up&quot;&gt; &lt;%- page.content %&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/div&gt; 这样就会多出一张 card，然后可以在 /source/about/index.md下面写上你的简历了，当然这里的位置随你自己设置，你也可以把简历作为第一个 card。 2.4 数学公式渲染和代码高亮 2.4.1 解决mathjax与代码高亮的冲突 如果你按照教程安装了代码高亮插件 hexo-prism-plugin，单独使用是没有问题的，但如果你又使用了 mathjax，并且按照网上教程，安装 kramed插件并修改了 js文件里的正则表达式（为了解决 markdown和 mathjax的语法冲突），那你的代码就无法高亮了。解决方法很简单，别用 kramed插件了，还用原来自带的 marked插件，直接改它的正则表达式就行了。 2.4.2 加数学公式显示 打开 /themes/matery/layout中的 post.ejs文件，在最下方粘贴如下代码： 1&lt;script type=&quot;text/javascript&quot; src=&quot;http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default&quot;&gt;&lt;/script&gt; Javascript 由于 markdown语法与 mathjax语法存在冲突，所以还需要修改源文件。 打开 /node_modules/marked/lib中的 marked.js文件，第539行的 escape:处替换成： 1escape: /^$[`*\\[\\]()#$+\\-.!_&gt;])/ 第553行的 em:处替换成： 1em: /^\\*((?:\\*\\*|[\\s\\S])+?)\\*(?!\\*)/ 这时在文章里写数学公式基本没有问题了，但是要注意：数学公式中如果出现了连续两个{，中间一定要加空格！ 举个例子:行内公式：y=f(x)y=f(x)代码： 1$y = f(x)$ Tex 行间公式： y=fg1(x)y=fg1(x) 代码： 1\\\\[y = {f_{ {g_1}}}(x)\\\\] Tex 注意上面花括号之间有空格！ 2.5 增加建站时间 修改 /themes/matery/layout/_partial中的 footer.ejs，在最后加上： 1234567891011121314151617181920212223242526272829303132333435&lt;script language=javascript&gt; function siteTime() { window.setTimeout(&quot;siteTime()&quot;, 1000); var seconds = 1000; var minutes = seconds * 60; var hours = minutes * 60; var days = hours * 24; var years = days * 365; var today = new Date(); var todayYear = today.getFullYear(); var todayMonth = today.getMonth() + 1; var todayDate = today.getDate(); var todayHour = today.getHours(); var todayMinute = today.getMinutes(); var todaySecond = today.getSeconds(); /* Date.UTC() -- 返回date对象距世界标准时间(UTC)1970年1月1日午夜之间的毫秒数(时间戳) year - 作为date对象的年份，为4位年份值 month - 0-11之间的整数，做为date对象的月份 day - 1-31之间的整数，做为date对象的天数 hours - 0(午夜24点)-23之间的整数，做为date对象的小时数 minutes - 0-59之间的整数，做为date对象的分钟数 seconds - 0-59之间的整数，做为date对象的秒数 microseconds - 0-999之间的整数，做为date对象的毫秒数 */ var t1 = Date.UTC(2017, 09, 11, 00, 00, 00); //北京时间2018-2-13 00:00:00 var t2 = Date.UTC(todayYear, todayMonth, todayDate, todayHour, todayMinute, todaySecond); var diff = t2 - t1; var diffYears = Math.floor(diff / years); var diffDays = Math.floor((diff / days) - diffYears * 365); var diffHours = Math.floor((diff - (diffYears * 365 + diffDays) * days) / hours); var diffMinutes = Math.floor((diff - (diffYears * 365 + diffDays) * days - diffHours * hours) / minutes); var diffSeconds = Math.floor((diff - (diffYears * 365 + diffDays) * days - diffHours * hours - diffMinutes * minutes) / seconds); document.getElementById(&quot;sitetime&quot;).innerHTML = &quot;本站已运行 &quot; +diffYears+&quot; 年 &quot;+diffDays + &quot; 天 &quot; + diffHours + &quot; 小时 &quot; + diffMinutes + &quot; 分钟 &quot; + diffSeconds + &quot; 秒&quot;; }/*因为建站时间还没有一年，就将之注释掉了。需要的可以取消*/ siteTime();&lt;/script&gt; 然后在合适的地方（比如 copyright声明后面）加上下面的代码就行了： 1&lt;span id=&quot;sitetime&quot;&gt;&lt;/span&gt; 2.6 修改不蒜子初始化计数 因为不蒜子至今未开放注册，所以没办法在官网修改初始化，只能自己动手了。和上一条一样，我们在 /themes/matery/layout/_partial里的 footer.ejs文件最后加上： 12345678910111213141516171819&lt;script&gt; $(document).ready(function () { var int = setInterval(fixCount, 50); // 50ms周期检测函数 var pvcountOffset = 80000; // 初始化首次数据 var uvcountOffset = 20000; function fixCount() { if (document.getElementById(&quot;busuanzi_container_site_pv&quot;).style.display != &quot;none&quot;) { $(&quot;#busuanzi_value_site_pv&quot;).html(parseInt($(&quot;#busuanzi_value_site_pv&quot;).html()) + pvcountOffset); clearInterval(int); } if ($(&quot;#busuanzi_container_site_pv&quot;).css(&quot;display&quot;) != &quot;none&quot;) { $(&quot;#busuanzi_value_site_uv&quot;).html(parseInt($(&quot;#busuanzi_value_site_uv&quot;).html()) + uvcountOffset); // 加上初始数据 clearInterval(int); // 停止检测 } } });&lt;/script&gt; 然后把上面几行有段代码： 1234567891011&lt;% if (theme.busuanziStatistics &amp;&amp; theme.busuanziStatistics.totalTraffic) { %&gt; &lt;span id=&quot;busuanzi_container_site_pv&quot;&gt; &lt;i class=&quot;fa fa-heart-o&quot;&gt;&lt;/i&gt; 本站总访问量 &lt;span id=&quot;busuanzi_value_site_pv&quot; class=&quot;white-color&quot;&gt;&lt;/span&gt; &lt;/span&gt;&lt;% } %&gt;&lt;% if (theme.busuanziStatistics &amp;&amp; theme.busuanziStatistics.totalNumberOfvisitors) { %&gt; &lt;span id=&quot;busuanzi_container_site_uv&quot;&gt; 人次, 访客数 &lt;span id=&quot;busuanzi_value_site_uv&quot; class=&quot;white-color&quot;&gt;&lt;/span&gt; 人. &lt;/span&gt;&lt;% } %&gt; 修改为： 1234567891011&lt;% if (theme.busuanziStatistics &amp;&amp; theme.busuanziStatistics.totalTraffic) { %&gt; &lt;span id=&quot;busuanzi_container_site_pv&quot; style='display:none'&gt; &lt;i class=&quot;fa fa-heart-o&quot;&gt;&lt;/i&gt; 本站总访问量 &lt;span id=&quot;busuanzi_value_site_pv&quot; class=&quot;white-color&quot;&gt;&lt;/span&gt; &lt;/span&gt;&lt;% } %&gt;&lt;% if (theme.busuanziStatistics &amp;&amp; theme.busuanziStatistics.totalNumberOfvisitors) { %&gt; &lt;span id=&quot;busuanzi_container_site_uv&quot; style='display:none'&gt; 人次, 访客数 &lt;span id=&quot;busuanzi_value_site_uv&quot; class=&quot;white-color&quot;&gt;&lt;/span&gt; 人. &lt;/span&gt;&lt;% } %&gt; 其实就是增加了两个 style='display:none'而已。 2.7 添加动漫人物 其实三步就行了，不用像网上有些教程那么复杂。 第一步： 1npm install --save hexo-helper-live2d 第二步： 1npm install live2d-widget-model-shizuku 这里的动漫模型可以改，只需要下载对应模型就行了，你可以官方仓库去看有哪些模型，下载你喜欢的就行。 第三步：在根目录配置文件中添加如下代码： 123456789101112131415161718live2d: enable: true scriptFrom: local pluginRootPath: live2dw/ pluginJsPath: lib/ pluginModelPath: assets/ tagMode: false log: false model: use: live2d-widget-model-shizuku display: position: right width: 150 height: 300 mobile: show: false react: opacity: 0.7 然后 hexo g再 hexo s就能预览出效果了，但是有个注意的地方，这个动漫人物最好不要和不蒜子同时使用，不然不蒜子会显示不出来。至于解决办法后续更新。 解决动漫人物和不蒜子不能同时使用的 bug（2019.08.11）： 打开 themes\\matery\\layout\\_partial中的 footer.ejs，将本站总访问量和访客数的代码改为如下： 123456789101112&lt;% if (theme.busuanziStatistics &amp;&amp; theme.busuanziStatistics.totalTraffic) { %&gt; &lt;span id=&quot;busuanzi_container_site_pv&quot; style='display:none'&gt;&lt;/span&gt; &lt;i class=&quot;fa fa-heart-o&quot;&gt;&lt;/i&gt; 本站总访问量 &lt;span id=&quot;busuanzi_value_site_pv&quot; class=&quot;white-color&quot;&gt;&lt;/span&gt;&lt;% } %&gt;&lt;% if (theme.busuanziStatistics &amp;&amp; theme.busuanziStatistics.totalNumberOfvisitors) { %&gt; &lt;span id=&quot;busuanzi_container_site_uv&quot; style='display:none'&gt;&lt;/span&gt; 人次, 访客数 &lt;span id=&quot;busuanzi_value_site_uv&quot; class=&quot;white-color&quot;&gt;&lt;/span&gt; 人.&lt;% } %&gt; 变化就在下面两句，将源代码对应字段后面的 ＜/span＞写在前面了。 12&lt;span id=&quot;busuanzi_container_site_pv&quot; style='display:none'&gt;&lt;/span&gt;&lt;span id=&quot;busuanzi_container_site_uv&quot; style='display:none'&gt;&lt;/span&gt; 发现按照上面改了过后，又出现一个新 bug：文章头部的阅读次数不显示了，解决办法：（2019.08.11）： 打开 themes\\matery\\layout\\_partial中的 post-detail.ejs，找到对应代码字段： 1234567&lt;% if (theme.busuanziStatistics &amp;&amp; theme.busuanziStatistics.enable) { %&gt; &lt;div id=&quot;busuanzi_container_page_pv&quot; class=&quot;info-break-policy&quot;&gt; &lt;i class=&quot;fa fa-eye fa-fw&quot;&gt;&lt;/i&gt;&lt;%- __('readCount') %&gt;: &lt;span id=&quot;busuanzi_value_page_pv&quot; &gt;&lt;/span&gt; &lt;/div&gt;&lt;% } %&gt; 修改为下面的就可以了： 123456&lt;% if (theme.busuanziStatistics &amp;&amp; theme.busuanziStatistics.enable) { %&gt; &lt;span id=&quot;busuanzi_container_site_pv&quot; style='display:none'&gt;&lt;/span&gt; &lt;i class=&quot;fa fa-eye fa-fw&quot;&gt;&lt;/i&gt;&lt;%- __('readCount') %&gt;: &lt;span id=&quot;busuanzi_value_page_pv&quot; &gt;&lt;/span&gt;&lt;% } %&gt; 2.8 添加评论插件 由于这个主题自带了 gittalk、gitment、valine等评论插件，所以我们只需要对应插件参数就行了，这个博客用的是 gittalk，如下： 当然也可以用其他评论插件，只需要配置对应项就是了，不是自带的可以照着网上的教程自己弄一个，类似的文章有很多，可以搜索关键字就行了。 2.9 添加网易云音乐BGM 写文章的时候，想插入一段 BGM怎么办？ 其实我们可以借助一些在线音乐的外链播放方式，首先打开网易云网页版，找到想听的歌曲，然后点击生成外链： 可能你会遇到问题，比如点击生成外链会提示你由于版权原因，不能生成，那么可以用下面办法目前还有效，不知道后面会不会失效目前还有效，不知道后面会不会失效 (以 Chrome为例，其他浏览器类似) 打开歌单页面，在“生成外链播放器”上右击，点击审查元素（检查）ctrl+shift+i； 接着找到生成外链播放器这段文字直接双击复制前面的 /outchain/2/20707408/ 然后在浏览器地址栏修改歌单链接，示例：http://music.163.com/#//outchain/2/20707408/ 然后就转到外链设置页面了。 复制如下代码： 粘贴到文章对应位置就行了，为了美观，设置一下居中，具体代码如下： 1&lt;div align=&quot;middle&quot;&gt;这里粘贴刚刚复制的代码&lt;/div&gt; 2.10 博客音乐板块 如果我们自己写博客写疲劳了，想放松一下听听歌又不想切出博客主页，那么我们可以自己定制一个博客音乐播放界面，把自己喜欢的歌曲都放进来，这里用到是Aplayer插件，但是歌曲来源需要我们自己定义，但是，因为各大音乐平台，由于版权原因，很多歌曲是不支持外链播放的，难道我们就必须每首歌下载然后上传云空间，再获取词曲封面么？这就比较麻烦了。其实不然，研究了半个小时，我发现可以采取下面的办法，很方便： 首先我们找到网易云在线平台，任意找到一首歌点进去播放，可以在地址栏拿到音乐 ID号 然后通过下面网址：http://music.163.com/song/media/outer/url?id=XXXXXX.mp3， XXXXXX就是歌曲 ID号，每一首歌我们只需要换掉这个 ID号就行了,就相当于每一首的外链了 最后封面图也可以按 F12去找页面元素的链接，填到对应的 musics.jason文件中就可以，批量填入，听到好听的歌曲随时更换随时新增，很方便。 操作如下图： 2.11 增加emoji支持 为博客新增对 emoji表情的支持，使用到了 hexo-filter-github-emojis 的 Hexo 插件来支持 emoji表情的生成，把对应的 markdown emoji语法（::,例如：😄 :smile:）转变成会跳跃的 emoji表情，安装命令如下： 1npm install hexo-filter-github-emojis --save 在 Hexo 根目录下的 _config.yml 文件中，新增以下的配置项： 123456githubEmojis: enable: true className: github-emoji inject: true styles: customEmojis: Yaml 执行 hexo clean &amp;&amp; hexo g 重新生成博客文件，然后就可以在文章中对应位置看到你用 emoji语法写的表情了。如下图： emoji支持 2.12 Valine评论模块修改 matery主题已经集成 Valine评论模块，在主题配置文件.yml中配置相应的字段就行了。enable: true，XXX字段是需要自己注册登录 leancloud官网，创建应用然后获取 appId和 appKey，其他参数根据自己的需求修改就是，如下： 12345678910valine: enable: true appId: XXXXXXXXXXXXXXXXXXXXX appKey: XXXXXXXXXXXXXXXXXXXX notify: true verify: true visitor: true avatar: 'mm' # Gravatar style : mm/identicon/monsterid/wavatar/retro/hide pageSize: 10 placeholder: 'just go go' # Comment Box placeholder 注意：Valine用在 matery主题上有个 bug就是第一条评论位置会错位 如下图： 位置错位 解决办法：F12开发者模式，控制台定位 bug位置，修改参数，调整对应主题源文件参数，得以解决，如下图示： 定位bug位置 修改图示 2.13 添加博客动态标签 原理就是给博客增加一个事件判断，如下图所示： 打开博客主题文件夹，路径：themes/matery/layout/layout.ejs，在对应位置添加如下代码： 12345678910&lt;script type=&quot;text/javascript&quot;&gt; var OriginTitile = document.title, st; document.addEventListener(&quot;visibilitychange&quot;, function () { document.hidden ? (document.title = &quot;看不见我🙈~看不见我🙈~&quot;, clearTimeout(st)) : (document.title = &quot;(๑•̀ㅂ•́) ✧被发现了～&quot;, st = setTimeout(function () { document.title = OriginTitile }, 3e3)) })&lt;/script&gt; 然后 hexo clean &amp;&amp; hexo g 即可。 2.14 添加鼠标点击烟花爆炸效果 在 /themes/matery/source/js 新建文件 fireworks.js，并添加如下代码 Download Now 然后在 /themes/matery/layout/_partial/footer.ejs 中添加如下代码： 12345&lt;% if (theme.fireworks.enable) { %&gt;&lt;canvas class=&quot;fireworks&quot; style=&quot;position: fixed; left: 0; top: 0; z-index: 1; pointer-events: none;&quot; &gt;&lt;/canvas&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;//cdn.bootcss.com/animejs/2.2.0/anime.min.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;/js/fireworks.js&quot;&gt;&lt;/script&gt;&lt;% } %&gt; 在主题配置文件 .yml中配置: 123# 鼠标点击烟花爆炸动效fireworks: enable: true 2.15 添加页面樱花飘落动效 在 /themes/matery/source/js 新建文件 sakura.js，并添加如下代码 Download Now 然后在 /themes/matery/layout/_partial/head.ejs 中添加如下代码： 123456789&lt;% if (theme.sakura.enable) { %&gt; &lt;script type=&quot;text/javascript&quot;&gt; //只在桌面版网页启用特效 var windowWidth = $(window).width(); if (windowWidth &gt; 768) { document.write('&lt;script type=&quot;text/javascript&quot; src=&quot;/js/sakura.js&quot;&gt;&lt;/script&gt;'); } &lt;/script&gt;&lt;% } %&gt; 在主题配置文件 .yml中配置: 123# 页面樱花飘落动效sakura: enable: true 2.16 添加鼠标点击文字特效 在 /themes/matery/source/js 新建文件 wenzi.js，并添加如下代码 Download Now 然后在 /themes/matery/layout/_partial/head.ejs 中添加如下代码： 123456789&lt;% if (theme.wenzi.enable) { %&gt; &lt;script type=&quot;text/javascript&quot;&gt; //只在桌面版网页启用特效 var windowWidth = $(window).width(); if (windowWidth &gt; 768) { document.write('&lt;script type=&quot;text/javascript&quot; src=&quot;/js/wenzi.js&quot;&gt;&lt;/script&gt;'); } &lt;/script&gt;&lt;% } %&gt; 在主题配置文件 .yml中配置: 123# 页面樱花飘落动效wenzi: enable: true 2.17 添加页面雪花飘落动效 在 /themes/matery/source/js 新建文件 xuehuapiaoluo.js，并添加如下代码 Download Now 然后在 /themes/matery/layout/_partial/head.ejs 中添加如下代码： 123456789&lt;% if (theme.xuehuapiaoluo.enable) { %&gt; &lt;script type=&quot;text/javascript&quot;&gt; //只在桌面版网页启用特效 var windowWidth = $(window).width(); if (windowWidth &gt; 768) { document.write('&lt;script type=&quot;text/javascript&quot; src=&quot;/js/xuehuapiaoluo.js&quot;&gt;&lt;/script&gt;'); } &lt;/script&gt;&lt;% } %&gt; 在主题配置文件 .yml中配置: 123# 页面樱花飘落动效xuehuapiaoluo: enable: true 2.18 添加博客天气插件 在搜寻插件的过程中无意间用 google 搜到的一个网站，使用非常简单，在这里附上插件添加的方法 中国天气网：https://cj.weather.com.cn/plugin/pc 选择自定义插件—&gt;自定义样式——&gt;生成代码，然后会生成这样一段代码 123&lt;!-- Weather Widget --&gt; &lt;script type=&quot;text/javascript&quot;&gt; WIDGET = {FID: 'your FID'}&lt;/script&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;https://apip.weatherdt.com/float/static/js/r.js?v=1111&quot;&gt;&lt;/script&gt; 在 /themes/matery/source/layout/_widget 新建文件 weather.ejs，把上面生成的代码添加进入,可以设置只有桌面端显示,如下修改: 12345678910111213&lt;!-- 天气接口 洪卫 shw2018 add 2019.09.09 --&gt;&lt;script type=&quot;text/javascript&quot;&gt; WIDGET = {FID: '1tFpFZ5Mtj'}&lt;/script&gt;&lt;!-- &lt;script type=&quot;text/javascript&quot; src=&quot;https://apip.weatherdt.com/float/static/js/r.js?v=1111&quot;&gt;&lt;/script&gt; --&gt;&lt;script type=&quot;text/javascript&quot;&gt; //只在桌面版网页启用特效 var windowWidth = $(window).width(); if (windowWidth &gt; 768) { document.write('&lt;script type=&quot;text/javascript&quot; src=&quot;https://apip.weatherdt.com/float/static/js/r.js?v=1111&quot;&gt;&lt;\\/script&gt;'); } &lt;/script&gt; 然后在 /themes/matery/layout/_partial/layout.ejs 中添加如下代码： 1234&lt;!-- 天气接口控件 洪卫 shw2018 add 2019.09.09 --&gt;&lt;% if (theme.weather.enable) { %&gt; &lt;%- partial('_widget/weather') %&gt;&lt;% } %&gt; 在主题配置文件 .yml中配置: 123# 天气接口插件weather: enable: true 展示效果可以参考我的主页 当然,如果你不想搞这么复杂,可以直接将下面代码插入 /themes/matery/layout/_partial/layout.ejs 中即可使用: 1234&lt;script type=&quot;text/javascript&quot;&gt; WIDGET = {FID: '1tFpFZ5Mtj'}&lt;/script&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;https://apip.weatherdt.com/float/static/js/r.js?v=1111&quot;&gt;&lt;/script&gt; 2.19 修复 Valine 头像不显示问题关于头像显示问题，先去注册Gravatar，之前看文档说是七天的同步时间，结果一直也没有显示头像，检查查看头像链接，发现把&amp;v=1.3.x 去掉就可以了，于是下载 js 文件 valine，下载后然后编辑，搜索关键字 &amp;v=，找到 g.params=”?d=”+i.indexOf(ai.indexOf(a&gt;-1?a:”mp”)+”&amp;v=”+o+d，将 &quot;&amp;v=&quot;+o+d 删除即可，然后在 Gravatar 拿到头像的 url 填上去就行了 1234567891011valine: enable: true appId: appKey: notify: true verify: true visitor: true # avatar: 'mp' # Gravatar style : mm/identicon/monsterid/wavatar/retro/hide avatar: https://s.gravatar.com/avatar/0007991f99268c04f1aa4cdd9bea93b4?s=80 pageSize: 10 placeholder: '没有Github账号的在这里留言评论～' # Comment Box placeholder 原因就是链接后跟了个 &amp;v=1.3.x，解决就是将这段删掉就可以了，具体到 Valine.mini.js 文件就是删掉 &amp;v=&quot;+o+d即可 2.20 增加二级菜单都知道，我们标题栏宽度有限，我们项目一多了，就放不下了，这时候你肯定就需要一个二级菜单来拆分一下项目，既可以减少标题栏项目数，使之更加清爽，又可以间项目分类，逻辑清晰。 好了，如果你用的matery主题，那么废话不多说，直接上教程，其实需要修改的就四个地方：matery.css/matery.js/navgation.ejs/mobile-nav.ejs 第一步，在 /themes/matery/layout/_partial 中找到 mobile-nav.ejs ，找到下面这段代码： 12345678910111213141516171819202122&lt;ul class=&quot;menu-list mobile-menu-list&quot;&gt; &lt;% Object.keys(theme.menu).forEach(function(key) { %&gt; &lt;li&gt; &lt;a href=&quot;&lt;%- theme.menu[key].url %&gt;&quot; class=&quot;waves-effect waves-light&quot;&gt; &lt;% if (theme.menu[key].icon &amp;&amp; theme.menu[key].icon.length &gt; 0) { %&gt; &lt;i class=&quot;fa fa-fw &lt;%- theme.menu[key].icon %&gt;&quot;&gt;&lt;/i&gt; &lt;% } else { %&gt; &lt;i class=&quot;fa fa-fw fa-link&quot;&gt;&lt;/i&gt; &lt;% } %&gt; &lt;%- (config.language === 'zh-CN' &amp;&amp; menuMap.has(key)) ? menuMap.get(key) : key %&gt; &lt;/a&gt; &lt;/li&gt; &lt;% }); %&gt; &lt;% if (theme.githubLink &amp;&amp; theme.githubLink.enable) { %&gt; &lt;li&gt;&lt;div class=&quot;divider&quot;&gt;&lt;/div&gt;&lt;/li&gt; &lt;li&gt; &lt;a href=&quot;&lt;%- theme.githubLink.url %&gt;&quot; class=&quot;waves-effect waves-light&quot; target=&quot;_blank&quot;&gt; &lt;i class=&quot;fa fa-github-square fa-fw&quot;&gt;&lt;/i&gt;&lt;%- theme.githubLink.title %&gt; &lt;/a&gt; &lt;/li&gt; &lt;% } %&gt;&lt;/ul&gt; 替换成下面的： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748&lt;!-- 支持二级菜单特性 洪卫 shw2018 modify 2019.09.17 --&gt;&lt;ul class=&quot;menu-list mobile-menu-list&quot;&gt; &lt;% Object.keys(theme.menu).forEach(function(key) { %&gt; &lt;li class=&quot;m-nav-item&quot;&gt; &lt;% if(!theme.menu[key].children) { %&gt; &lt;a href=&quot;&lt;%- theme.menu[key].url %&gt;&quot; class=&quot;waves-effect waves-light&quot;&gt; &lt;% if (theme.menu[key].icon &amp;&amp; theme.menu[key].icon.length &gt; 0) { %&gt; &lt;i class=&quot;fa fa-fw &lt;%- theme.menu[key].icon %&gt;&quot;&gt;&lt;/i&gt; &lt;% } else { %&gt; &lt;i class=&quot;fa fa-fw fa-link&quot;&gt;&lt;/i&gt; &lt;% } %&gt; &lt;%- (config.language === 'zh-CN' &amp;&amp; menuMap.has(key)) ? menuMap.get(key) : key %&gt; &lt;/a&gt; &lt;% } else { %&gt; &lt;a href=&quot;javascript:;&quot;&gt; &lt;% if (theme.menu[key].icon &amp;&amp; theme.menu[key].icon.length &gt; 0) { %&gt; &lt;i class=&quot;fa fa-fw &lt;%- theme.menu[key].icon %&gt;&quot;&gt;&lt;/i&gt; &lt;% } else { %&gt; &lt;i class=&quot;fa fa-fw fa-link&quot;&gt;&lt;/i&gt; &lt;% } %&gt; &lt;%- (config.language === 'zh-CN' &amp;&amp; menuMap.has(key)) ? menuMap.get(key) : key %&gt; &lt;span class=&quot;m-icon&quot;&gt;&lt;i class=&quot;fa fa-chevron-right&quot;&gt;&lt;/i&gt;&lt;/span&gt; &lt;/a&gt; &lt;ul&gt; &lt;% for(let childrenLink of theme.menu[key].children){ %&gt; &lt;li&gt; &lt;a href=&quot;&lt;%- url_for(childrenLink.url)%&gt;&quot; &gt; &lt;% if (childrenLink.icon &amp;&amp; childrenLink.icon.length &gt; 0) { %&gt; &lt;i class=&quot;fa &lt;%- childrenLink.icon %&gt;&quot; style=&quot;left: 25px; position: absolute;&quot;&gt;&lt;/i&gt; &lt;% } %&gt; &lt;span&gt;&lt;%- childrenLink.name %&gt;&lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;% } %&gt; &lt;/ul&gt; &lt;% } %&gt; &lt;/li&gt; &lt;% }); %&gt; &lt;% if (theme.githubLink &amp;&amp; theme.githubLink.enable) { %&gt; &lt;li&gt;&lt;div class=&quot;divider&quot;&gt;&lt;/div&gt;&lt;/li&gt; &lt;li&gt; &lt;a href=&quot;&lt;%- theme.githubLink.url %&gt;&quot; class=&quot;waves-effect waves-light&quot; target=&quot;_blank&quot;&gt; &lt;i class=&quot;fa fa-github-square fa-fw&quot;&gt;&lt;/i&gt;&lt;%- theme.githubLink.title %&gt; &lt;/a&gt; &lt;/li&gt; &lt;% } %&gt;&lt;/ul&gt; 第二步，在 /themes/matery/layout/_partial 中找到 navagtion.ejs ，找到下面这段代码： 123456789101112131415161718&lt;a href=&quot;#&quot; data-target=&quot;mobile-nav&quot; class=&quot;sidenav-trigger button-collapse&quot;&gt;&lt;i class=&quot;fa fa-navicon&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;ul class=&quot;right&quot;&gt; &lt;% Object.keys(theme.menu).forEach(function(key) { %&gt; &lt;li class=&quot;hide-on-med-and-down&quot;&gt; &lt;a href=&quot;&lt;%- theme.menu[key].url %&gt;&quot; class=&quot;waves-effect waves-light&quot;&gt; &lt;% if (theme.menu[key].icon &amp;&amp; theme.menu[key].icon.length &gt; 0) { %&gt; &lt;i class=&quot;fa &lt;%- theme.menu[key].icon %&gt;&quot;&gt;&lt;/i&gt; &lt;% } %&gt; &lt;span&gt;&lt;%- (config.language === 'zh-CN' &amp;&amp; menuMap.has(key)) ? menuMap.get(key) : key %&gt;&lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;% }); %&gt; &lt;li&gt; &lt;a href=&quot;#searchModal&quot; class=&quot;modal-trigger waves-effect waves-light&quot;&gt; &lt;i id=&quot;searchIcon&quot; class=&quot;fa fa-search&quot; title=&quot;&lt;%= __('search') %&gt;&quot;&gt;&lt;/i&gt; &lt;/a&gt; &lt;/li&gt;&lt;/ul&gt; 替换成下面的： 123456789101112131415161718192021222324252627282930313233343536373839404142434445&lt;!-- 支持二级菜单特性 洪卫 shw2018 modify 2019.09.17 --&gt;&lt;a href=&quot;#&quot; data-target=&quot;mobile-nav&quot; class=&quot;sidenav-trigger button-collapse&quot;&gt;&lt;i class=&quot;fa fa-navicon&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;ul class=&quot;right nav-menu&quot;&gt; &lt;% Object.keys(theme.menu).forEach(function(key) { %&gt; &lt;li class=&quot;hide-on-med-and-down nav-item&quot; &gt; &lt;% if(!theme.menu[key].children) { %&gt; &lt;a href=&quot;&lt;%- theme.menu[key].url %&gt;&quot; class=&quot;waves-effect waves-light&quot;&gt; &lt;% if (theme.menu[key].icon &amp;&amp; theme.menu[key].icon.length &gt; 0) { %&gt; &lt;i class=&quot;fa &lt;%- theme.menu[key].icon %&gt;&quot;&gt;&lt;/i&gt; &lt;% } %&gt; &lt;span&gt;&lt;%- (config.language === 'zh-CN' &amp;&amp; menuMap.has(key)) ? menuMap.get(key) : key %&gt;&lt;/span&gt; &lt;/a&gt; &lt;% } else { %&gt; &lt;a href=&quot;&lt;%- theme.menu[key].url %&gt;&quot; class=&quot;waves-effect waves-light&quot;&gt; &lt;% if (theme.menu[key].icon &amp;&amp; theme.menu[key].icon.length &gt; 0) { %&gt; &lt;i class=&quot;fa &lt;%- theme.menu[key].icon %&gt;&quot;&gt;&lt;/i&gt; &lt;% } %&gt; &lt;span&gt;&lt;%- (config.language === 'zh-CN' &amp;&amp; menuMap.has(key)) ? menuMap.get(key) : key %&gt;&lt;/span&gt; &lt;i class=&quot;fa fa-chevron-down&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; &lt;/a&gt; &lt;ul class=&quot;sub-nav menus_item_child &quot;&gt; &lt;% for(let childrenLink of theme.menu[key].children){ %&gt; &lt;li&gt; &lt;a href=&quot;&lt;%- url_for(childrenLink.url)%&gt;&quot; &gt; &lt;% if (childrenLink.icon &amp;&amp; childrenLink.icon.length &gt; 0) { %&gt; &lt;i class=&quot;fa &lt;%- childrenLink.icon %&gt;&quot; style=&quot;margin-top: -20px;&quot;&gt;&lt;/i&gt; &lt;% } %&gt; &lt;span&gt;&lt;%- childrenLink.name %&gt;&lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;% } %&gt; &lt;/ul&gt; &lt;% } %&gt; &lt;/li&gt; &lt;% }); %&gt; &lt;li&gt; &lt;a href=&quot;#searchModal&quot; class=&quot;modal-trigger waves-effect waves-light&quot;&gt; &lt;i id=&quot;searchIcon&quot; class=&quot;fa fa-search&quot; title=&quot;&lt;%= __('search') %&gt;&quot;&gt;&lt;/i&gt; &lt;/a&gt; &lt;/li&gt;&lt;/ul&gt; 第三步，在 /themes/matery/source/css 中找到 matery.css ，在最后添加下面这段代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124/* 二级菜单样式定义 洪卫 shw2018 add 2019.09.17 */.nav-menu {}.nav-menu li .sub-nav { position: absolute; top: 77px; list-style: none; margin-left: -20px; display: none;}.nav-menu li .sub-nav li { text-align: center; clear: left; width: 140px; height: 35px; line-height: 35px; position: relative;}.nav-menu li .sub-nav li a { height: 34px; line-height: 34px; width: 138px; padding: 0px; display: inline-block; border-radius: 5px; color: #000;}.nav-show i[aria-hidden=true] { -webkit-transform: rotate(180deg) !important; -moz-transform: rotate(180deg) !important; -o-transform: rotate(180deg) !important; -ms-transform: rotate(180deg) !important; transform: rotate(180deg) !important; -webkit-transition: all .3s; -moz-transition: all .3s; -o-transition: all .3s; -ms-transition: all .3s; transition: all .3s;}.menus_item_child { background-color: rgba(255, 255, 255, .8); width: fit-content; border-radius: 10px; -webkit-box-shadow: 0 5px 20px -4px rgba(0, 0, 0, .5); box-shadow: 0 5px 20px -4px rgba(0, 0, 0, .5); display: none; opacity: 0.98; -ms-filter: none; filter: none; -webkit-animation: sub_menus .3s .1s ease both; -moz-animation: sub_menus .3s .1s ease both; -o-animation: sub_menus .3s .1s ease both; -ms-animation: sub_menus .3s .1s ease both; animation: sub_menus .3s .1s ease both;}.menus_item_child:before { content: &quot;&quot;; position: absolute; top: -20px; left: 50%; margin-left: -10px; border-width: 10px; border-style: solid; border-color: transparent transparent rgba(255, 255, 255, .8)}.m-nav-item { /* position: relative; */ left: 45px}.m-nav-item ul { display: none; background: rgba(255, 255, 255, .1);}.m-nav-item ul li { width: 245px; height: 50px; line-height: 50px; text-align: center;}.m-nav-show .m-icon { -webkit-transform: rotate(90deg) !important; -moz-transform: rotate(90deg) !important; -o-transform: rotate(90deg) !important; -ms-transform: rotate(90deg) !important; transform: rotate(90deg) !important; -webkit-transition: all .3s; -moz-transition: all .3s; -o-transition: all .3s; -ms-transition: all .3s; transition: all .3s;}.m-nav-show .m-nav-item&gt;a:hover { color: #FFF; background: rgba(255, 255, 255, .8);}.m-nav-show&gt;a:before,.m-nav-item&gt;a:hover:before { opacity: 1;}.m-nav-item .m-icon { position: absolute; right: 65px; height: 50px; padding: 0px; margin: 0px;}.nav-item li:hover a { color: #FFF; background: rgba(0, 0, 0, .1);} 第四步，在 /themes/matery/source/js 中找到 matery.js ，在最后一个 });前添加下面这段代码： 1234567891011121314151617181920// 增加二级菜单功能 洪卫 shw2018 add 2019.09.17 $(&quot;.nav-menu&gt;li&quot;).hover(function(){ $(this).children('ul').stop(true,true).show(); $(this).addClass('nav-show').siblings('li').removeClass('nav-show'); },function(){ $(this).children('ul').stop(true,true).hide(); $('.nav-item.nav-show').removeClass('nav-show'); }) $('.m-nav-item&gt;a').on('click',function(){ if ($(this).next('ul').css('display') == &quot;none&quot;) { $('.m-nav-item').children('ul').slideUp(300); $(this).next('ul').slideDown(300); $(this).parent('li').addClass('m-nav-show').siblings('li').removeClass('m-nav-show'); }else{ $(this).next('ul').slideUp(300); $('.m-nav-item.m-nav-show').removeClass('m-nav-show'); } }); 第五步，在主题配置文件.yml修改标题栏内容，按下面格式更改: 123456789101112标题一级: url: /XXX icon: fa-XXXX children: - name: 标题二级1 url: /XXX/XXX icon: fa-XXXX - name: 标题二级2 url: /XXX/XXX icon: fa-XXXX 第六步，source 文件夹新疆对应的标题目录，并放 index.md 模板就行了。 到这一步就大功告成了，快去体验吧。 第三部分 优化 hexo添加各种优化功能，比如 SEO优化等。待续…… 1. 网站SEO优化 网站推广是一个比较烦人的事情，特别是对于专心搞技术的来说，可能就不是很擅长，那么怎么才能让别人知道我们网站呢？也就是说我们需要想办法让别人通过搜索就可以搜索到博客的内容，给我们带来自然流量，这就需要 seo优化,让我们的站点变得对搜索引擎友好 SEO是由英文 Search Engine Optimization缩写而来， 中文意译为“搜索引擎优化”。SEO是指通过站内优化比如网站结构调整、网站内容建设、网站代码优化等以及站外优化。 1.1 让百度收录你的站点 首先要做的就是让各大搜索引擎收录你的站点，我们在刚建站的时候各个搜索引擎是没有收录我们网站的，在搜索引擎中输入 site:&lt;域名&gt;,如果如下图所示就是说明我们的网站并没有被百度收录。我们可以直接点击下面的“网址提交”来提交我们的网站 查看站点是否被百度收录 1.1.1 验证网站所有权 登录百度站长搜索资源平台：http://zhanzhang.baidu.com， 只要有百度旗下的账号就可以登录，登录成功之后在站点管理中点击添加网站然后输入你的站点地址。 注意，这里需要输入我们自己购买的域名,不能使用 xxx.github.io之类域名.因为 github是不允许百度的 spider（蜘蛛）爬取 github上的内容的，所以如果想让你的站点被百度收录，只能使用自己购买的域名 向百度站长添加网站 在填完网址选择完网站的类型之后需要验证网站的所有权，验证网站所有权的方式有三种： 文件验证。 html标签验证 CNAME解析验证（推荐使用） 验证网站所有权 其实使用哪一种方式都可以，都是比较简单的。 但是一定要注意，使用文件验证文件存放的位置需要放在 sourc文件夹下，如果是 html文件那么 hexo就会将其编译，所以必须要在 html头部加上的 layout:false，这样就不会被 hexo编译。（如果验证文件是 txt格式的就不需要） 其他两种方式也是很简单的，个人推荐 文件验证和 CNAME验证，CNAME验证最为简单，只需加一条解析就好~ 添加云解析 验证通过 1.1.2 生成网站地图 我们需要使用 npm自动生成网站的 sitemap，然后将生成的 sitemap提交到百度和其他搜索引擎 1.1.2.1 安装sitemap插件 12npm install hexo-generator-sitemap --save npm install hexo-generator-baidu-sitemap --save 1.1.2.2 修改博客配置文件 在根目录配置文件 .yml中修改 url为你的站点地址 1234567# URL### If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'# url: https://shw2018.github.io/url: https://sunhwee.comroot: /permalink: :year/:month/:day/:title/permalink_defaults: 执行完 hexo g命令之后就会在网站根目录生成 sitemap.xml文件和 baidusitemap.xml文件，可以通过：https://sunhwee.com/baidusitemap.xml, 查看该文件是否生成，其中 sitemap.xml文件是搜索引擎通用的文件，baidusitemap.xml是百度专用的 sitemap文件。 1.1.3 向百度提交链接 然后我们就可以将我们生成的 sitemap文件提交给百度，还是在百度站长平台，找到链接提交，这里我们可以看到有两种提交方式，自动提交和手动提交，自动提交又分为主动推送、自动推送和 sitemap 如何选择链接提交方式 主动推送：最为快速的提交方式，推荐您将站点当天新产出链接立即通过此方式推送给百度，以保证新链接可以及时被百度收录。 自动推送：最为便捷的提交方式，请将自动推送的 JS代码部署在站点的每一个页面源代码中，部署代码的页面在每次被浏览时，链接会被自动推送给百度。可以与主动推送配合使用。 sitemap：您可以定期将网站链接放到 sitemap中，然后将 sitemap提交给百度。百度会周期性的抓取检查您提交的 sitemap，对其中的链接进行处理，但收录速度慢于主动推送。 手动提交：一次性提交链接给百度，可以使用此种方式。 一般主动提交比手动提交效果好，这里介绍主动提交的三种方法 从效率上来说： 主动推送&gt;自动推送&gt;sitemap 连接提交 1.1.3.1 设置主动推送 安装插件 hexo-baidu-url-submit 1npm install hexo-baidu-url-submit --save 然后再根目录的配置文件中新增字段 12345baidu_url_submit: count: 80 # 提交最新的一个链接 host: www.sunhwee.com # 在百度站长平台中注册的域名 token: xxxxxxxxxxxxxx # 请注意这是您的秘钥， 所以请不要把博客源代码发布在公众仓库里! path: baidu_urls.txt # 文本文档的地址， 新链接会保存在此文本文档里 再加入新的 deploy： 12deploy:- type: baidu_url_submitter 如图所示： **注意,这里多个 type 的写法应该这么写,前面那个 type 是我推送到 Github 与 Coding的 page页面的配置,后面再讲这个。 密钥的获取位置在网页抓取中的链接提交这一块,如下所示: token获取 这样执行 hexo deploy的时候，新的链接就会被推送了。 推送成功时,会有如下终端提示 主动推送成功提示 各种不同的推送反馈字段说明在这里查看,一般来说,推送失败基本都是地址不相符造成的,我们只需对比 baidu_url_submit在 public中生成的 baidu_urls.txt的地址,与自己填写在 host字段中的地址对比看是否一样即可。 1.1.3.2 设置自动推送 在主题配置文件下设置,将 baidu_push设置为 true: 12# Enable baidu push so that the blog will push the url to baidu automatically which is very helpful for SEObaidu_push: true 然后主题文件目录加入下面代码，一般在目录 /themes/matery/layout/_partial中的 head.ejs中加入下面 JS代码（有可能你的目录不是这样，原理类似），这样全站都有了： 12345678910111213141516&lt;% if (theme.baidu_push) { %&gt; &lt;script&gt; (function(){ var bp = document.createElement('script'); var curProtocol = window.location.protocol.split(':')[0]; if (curProtocol === 'https') { bp.src = 'https://zz.bdstatic.com/linksubmit/push.js'; } else { bp.src = 'http://push.zhanzhang.baidu.com/push.js'; } var s = document.getElementsByTagName(&quot;script&quot;)[0]; s.parentNode.insertBefore(bp, s); })(); &lt;/script&gt;&lt;% } %&gt; 这样每次访问博客中的页面就会自动向百度提交 sitemap 1.1.3.3 sitemap方式 将我们上一步生成的 sitemap文件提交到百度就可以了~ 将sitemap提交到百度 我记得被百度收录过程还是蛮久的，一度让我以为我的方法有问题，提交链接在站长工具中有显示大概是有两天的时候，站点被百度收录大概花了半个月= =，让大家看一下现在的成果在百度搜索 site:sunhwee.com已经可以搜索到结果 站点已被百度收录 在搜索框输入域名也可以找到站点 站点已被百度收录 输入关键字的名字也可以在第二页就找到呢，好开森~ 站点已被百度收录 1.2 让google收录你的站点 1.2.1 操作步骤相比于百度，google的效率实在不能更快，貌似十分钟左右站点就被收录了，其实方法是和百度是一样的。 google站点平台：https://www.google.com/webmasters/ 注册账号 验证站点 提交 sitemap 向 google 添加 sitemap 后: 进入 Google Search Console - 抓取 - 站点地图,点击「添加/测试站点地图」,输入你的博客网址. 若无报错则站点地图提交成功 sitemap提交成功 一步一步来就好，过不了过久就可以被 google收录了 站点已被google收录 站点已被google收录 站点已被google收录 1.2.2 提交 robots.txt:robots.txt 是一种存放于网站根目录下的 ASCII 编码的文本文件，它的作用是告诉搜索引擎此网站中哪些内容是可以被爬取的，哪些是禁止爬取的。robots.txt 放在博客目录下的 source 文件夹中，博客生成后在站点目录 /public/ 下。 我的 robots.txt 文件内容如下： 123456789User-agent: *Allow: /Allow: /archives/Allow: /categories/Allow: /about/Disallow: /js/Disallow: /css/Disallow: /fonts/Disallow: /vendors/ robots.txt 文件更新至网站后可进入 Google Search Console - 抓取 - robots.txt 测试工具进行测试。 这里部分参考自 Hexo博客搜索 SEO优化-谷歌篇 1.3 让其他搜索引擎收录你的站点 除了百度和 google两大搜索引擎，还有搜狗、360等其他的搜索引擎，流程都是一样的，大家就自行选择添加哈，这里就不再赘述了~ 1.4 优化你的url 1seo`搜索引擎优化认为，网站的最佳结构是**用户从首页点击三次就可以到达任何一个页面**，但是我们使用`hexo`编译的站点打开文章的`url`是：`sitename/year/mounth/day/title`四层的结构，这样的`url`结构很不利于`seo`，爬虫就会经常爬不到我们的文章，于是，我们需要优化一下网站文章`url 方案一： 我们可以将 url直接改成 sitename/title的形式，并且 title最好是用英文，在根目录的配置文件下修改 permalink如下： 1234url: https://sunhwee.comroot: /permalink: :title.htmlpermalink_defaults: 方案二： 使用插件优化 url 插件 hexo-abbrlink实现了这个功能，它将原来的 URL地址重新进行了进制转换和再编码。 安装 hexo-abbrlink。 1npm install hexo-abbrlink --save 配置博客根目录下的_config.yml文件。 12345# permalink: :title/permalink: archives/:abbrlink.htmlabbrlink: alg: crc32 # 算法：crc16(default) and crc32 rep: hex # 进制：dec(default) and hex 运行 hexo clean和 hexo g命令来重新生成文件看看，可以清楚的看到，URL结构成功变为了3层。 1.5 其他seo优化 seo优化应该说是一个收益延迟的行为，可能你做的优化短期内看不到什么效果，但是一定要坚持，seo优化也是有很深的可以研究的东西，从我们最初的网站设计，和最基础的标签的选择都有很大的关系，网站设计就如我们刚刚说的，要让用户点击三次可以到达网站的任何一个页面，要增加高质量的外链，增加相关推荐（比如说我们经常见到右侧本站的最高阅读的排名列表），然后就是给每一个页面加上 keyword和描述 在代码中，我们应该写出能让浏览器识别的语义化 HTML，这样有助于爬虫抓取更多的有效信息：爬虫依赖于标签来确定上下文和各个关键字的权重；并且对外链设置 nofollow标签，避免 spider爬着爬着就爬出去了（减少网站的跳出率），并且我们要尽量在一些比较大的网站增加我们站点的曝光率，因为 spider会经常访问大站，比如我们在掘金等技术社区发表文章中带有我们的站点，这样 spider是很有可能爬到我们中的站点的，so…. 网站外链的推广度、数量和质量 网站的内链足够强大 网站的原创质量 网站的年龄时间 网站的更新频率（更新次数越多越好） 网站的服务器 网站的流量：流量越高网站的权重越高 网站的关键词排名：关键词排名越靠前，网站的权重越高 网站的收录数量：网站百度收录数量越多，网站百度权重越高 网站的浏览量及深度：用户体验越好，网站的百度权重越高 2. 优化代码块样式 由于代码高亮插件 prism_plugin的样式没有行号显示和代码块整体复制功能，不是很方便，为了优化观感和易用性，我们可以对其进行修改：待续…… 2.1 给代码块开启行号 我们在配置文件 .yml中找到 prism_plugin配置项 line_number: false（# default false）改为 true，开启行号，但是在我们这个 matery主题中中是无效的，有 bug需要改一下 matery.css样式参数,在第 95行位置将： 12345678pre { padding: 1.5rem !important; margin: 1rem 0 !important; background: #272822; overflow: auto; border-radius: 0.35rem; tab-size: 4;} 改为： 12345678pre { padding: 1.5rem 1.5rem 1.5rem 3.3rem !important; margin: 1rem 0 !important; background: #272822; overflow: auto; border-radius: 0.35rem; tab-size: 4;} 注释掉紧接着的 code代码块里面的 font-size项，如下： 12345678code { padding: 1px 5px; font-family: Inconsolata, Monaco, Consolas, 'Courier New', Courier, monospace; /*font-size: 0.91rem;*/ color: #e96900; background-color: #f8f8f8; border-radius: 2px;} 好了这下可以显示行号了，如图： 代码块显示行号 2.2 添加代码块复制功能 3. 优化网站加载速度 3.1 优化图片加载 issue问题：优化网站加载逻辑问题：图片最后加载，加入图片懒加载方法 hexo-lazyload-image的作用原理是讲你博客里面img标签的src属性替换为一个loading image，把真实的图片地址放在data-origin属性下面。然后当你的网页翻到那张图片时（也就是图片在窗口中完全可见时），他会有一段js用data-origin的内容替换src，打到懒加载的目的。 一般情况下懒加载和gallery插件会发生冲突，比如按照我上面所说，最终结果就会变成，可能只有第一张图片在gallery中打开是原图，右翻左翻都会是那张loading image，需要你掌握js，可以修改matery.js里面的内容，甚至可能换一个gallery，比如photosiwpe之类的 解决方法：修改 /themes/matery/source/js中的 matery.js文件 第103行： 123456$('#articleContent, #myGallery').lightGallery({ selector: '.img-item', // 启用字幕 subHtmlSelectorRelative: true, showThumbByDefault: false //这句加上}); 后面加上： 123$(document).find('img[data-original]').each(function(){ $(this).parent().attr(&quot;href&quot;, $(this).attr(&quot;data-original&quot;));}); 再装个插件，https://github.com/Troy-Yang/hexo-lazyload-image在博客根目录配置.yml文件加入对应字段，如下： 12345# lazyload configuration 2019.08.23lazyload: enable: true onlypost: false loadingImg: # eg ./images/loading.gif 好了，这样实现了博客网站的图片懒加载。 3.2 Gulp实现代码压缩 Gulp实现代码压缩，以提升网页加载速度。 1 首先我们需要安装Gulp插件和5个功能模块，依次运行下面的两条命令。 12345npm install gulp --save #安装gulp# 安装功能模块npm install gulp-htmlclean gulp-htmlmin gulp-minify-css gulp-uglify gulp-imagemin --save# 额外的功能模块npm install gulp-debug gulp-clean-css gulp-changed gulp-if gulp-plumber gulp-babel babel-preset-es2015 del --save 2 接下来在博客的根目录下新建gulpfile.js文件，并复制下面的内容到文件中。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168var gulp = require(&quot;gulp&quot;);var debug = require(&quot;gulp-debug&quot;);var cleancss = require(&quot;gulp-clean-css&quot;); //css压缩组件var uglify = require(&quot;gulp-uglify&quot;); //js压缩组件var htmlmin = require(&quot;gulp-htmlmin&quot;); //html压缩组件var htmlclean = require(&quot;gulp-htmlclean&quot;); //html清理组件var imagemin = require(&quot;gulp-imagemin&quot;); //图片压缩组件var changed = require(&quot;gulp-changed&quot;); //文件更改校验组件var gulpif = require(&quot;gulp-if&quot;); //任务 帮助调用组件var plumber = require(&quot;gulp-plumber&quot;); //容错组件（发生错误不跳出任务，并报出错误内容）var isScriptAll = true; //是否处理所有文件，(true|处理所有文件)(false|只处理有更改的文件)var isDebug = true; //是否调试显示 编译通过的文件var gulpBabel = require(&quot;gulp-babel&quot;);var es2015Preset = require(&quot;babel-preset-es2015&quot;);var del = require(&quot;del&quot;);var Hexo = require(&quot;hexo&quot;);var hexo = new Hexo(process.cwd(), {}); // 初始化一个hexo对象// 清除public文件夹gulp.task(&quot;clean&quot;, function() { return del([&quot;public/**/*&quot;]);});// 下面几个跟hexo有关的操作，主要通过hexo.call()去执行，注意return// 创建静态页面 （等同 hexo generate）gulp.task(&quot;generate&quot;, function() { return hexo.init().then(function() { return hexo .call(&quot;generate&quot;, { watch: false }) .then(function() { return hexo.exit(); }) .catch(function(err) { return hexo.exit(err); }); });});// 启动Hexo服务器gulp.task(&quot;server&quot;, function() { return hexo .init() .then(function() { return hexo.call(&quot;server&quot;, {}); }) .catch(function(err) { console.log(err); });});// 部署到服务器gulp.task(&quot;deploy&quot;, function() { return hexo.init().then(function() { return hexo .call(&quot;deploy&quot;, { watch: false }) .then(function() { return hexo.exit(); }) .catch(function(err) { return hexo.exit(err); }); });});// 压缩public目录下的js文件gulp.task(&quot;compressJs&quot;, function() { return gulp .src([&quot;./public/**/*.js&quot;, &quot;!./public/libs/**&quot;]) //排除的js .pipe(gulpif(!isScriptAll, changed(&quot;./public&quot;))) .pipe(gulpif(isDebug, debug({ title: &quot;Compress JS:&quot; }))) .pipe(plumber()) .pipe( gulpBabel({ presets: [es2015Preset] // es5检查机制 }) ) .pipe(uglify()) //调用压缩组件方法uglify(),对合并的文件进行压缩 .pipe(gulp.dest(&quot;./public&quot;)); //输出到目标目录});// 压缩public目录下的css文件gulp.task(&quot;compressCss&quot;, function() { var option = { rebase: false, //advanced: true, //类型：Boolean 默认：true [是否开启高级优化（合并选择器等）] compatibility: &quot;ie7&quot; //保留ie7及以下兼容写法 类型：String 默认：''or'*' [启用兼容模式； 'ie7'：IE7兼容模式，'ie8'：IE8兼容模式，'*'：IE9+兼容模式] //keepBreaks: true, //类型：Boolean 默认：false [是否保留换行] //keepSpecialComments: '*' //保留所有特殊前缀 当你用autoprefixer生成的浏览器前缀，如果不加这个参数，有可能将会删除你的部分前缀 }; return gulp .src([&quot;./public/**/*.css&quot;, &quot;!./public/**/*.min.css&quot;]) //排除的css .pipe(gulpif(!isScriptAll, changed(&quot;./public&quot;))) .pipe(gulpif(isDebug, debug({ title: &quot;Compress CSS:&quot; }))) .pipe(plumber()) .pipe(cleancss(option)) .pipe(gulp.dest(&quot;./public&quot;));});// 压缩public目录下的html文件gulp.task(&quot;compressHtml&quot;, function() { var cleanOptions = { protect: /&lt;\\!--%fooTemplate\\b.*?%--&gt;/g, //忽略处理 unprotect: /&lt;script [^&gt;]*\\btype=&quot;text\\/x-handlebars-template&quot;[\\s\\S]+?&lt;\\/script&gt;/gi //特殊处理 }; var minOption = { collapseWhitespace: true, //压缩HTML collapseBooleanAttributes: true, //省略布尔属性的值 &lt;input checked=&quot;true&quot;/&gt; ==&gt; &lt;input /&gt; removeEmptyAttributes: true, //删除所有空格作属性值 &lt;input id=&quot;&quot; /&gt; ==&gt; &lt;input /&gt; removeScriptTypeAttributes: true, //删除&lt;script&gt;的type=&quot;text/javascript&quot; removeStyleLinkTypeAttributes: true, //删除&lt;style&gt;和&lt;link&gt;的type=&quot;text/css&quot; removeComments: true, //清除HTML注释 minifyJS: true, //压缩页面JS minifyCSS: true, //压缩页面CSS minifyURLs: true //替换页面URL }; return gulp .src(&quot;./public/**/*.html&quot;) .pipe(gulpif(isDebug, debug({ title: &quot;Compress HTML:&quot; }))) .pipe(plumber()) .pipe(htmlclean(cleanOptions)) .pipe(htmlmin(minOption)) .pipe(gulp.dest(&quot;./public&quot;));});// 压缩 public/uploads 目录内图片gulp.task(&quot;compressImage&quot;, function() { var option = { optimizationLevel: 5, //类型：Number 默认：3 取值范围：0-7（优化等级） progressive: true, //类型：Boolean 默认：false 无损压缩jpg图片 interlaced: false, //类型：Boolean 默认：false 隔行扫描gif进行渲染 multipass: false //类型：Boolean 默认：false 多次优化svg直到完全优化 }; return gulp .src(&quot;./public/medias/**/*.*&quot;) .pipe(gulpif(!isScriptAll, changed(&quot;./public/medias&quot;))) .pipe(gulpif(isDebug, debug({ title: &quot;Compress Images:&quot; }))) .pipe(plumber()) .pipe(imagemin(option)) .pipe(gulp.dest(&quot;./public&quot;));});// 执行顺序： 清除public目录 -&gt; 产生原始博客内容 -&gt; 执行压缩混淆 -&gt; 部署到服务器gulp.task( &quot;build&quot;, gulp.series( &quot;clean&quot;, &quot;generate&quot;, &quot;compressHtml&quot;, &quot;compressCss&quot;, &quot;compressJs&quot;, &quot;compressImage&quot;, gulp.parallel(&quot;deploy&quot;) ));// 默认任务gulp.task( &quot;default&quot;, gulp.series( &quot;clean&quot;, &quot;generate&quot;, gulp.parallel(&quot;compressHtml&quot;, &quot;compressCss&quot;, &quot;compressImage&quot;, &quot;compressJs&quot;) ));//Gulp4最大的一个改变就是gulp.task函数现在只支持两个参数，分别是任务名和运行任务的函数 3 最后 hexo clean &amp;&amp; hexo g &amp;&amp; gulp &amp;&amp; hexo d 就可以了。 注意，很可能你会运行到第三步，也就是运行 gulp压缩命令时会报错，如图所示： gulp运行错误 那是因为gulp安装的本地版本和hexo自带的版本不对应导致，第三步gulp压缩可以用下面命令强制使用本地版本： 1node ./node_modules/gulp/bin/gulp.js 3.3 Github &amp; Coding Pages 双部署 Github &amp; Coding Pages 双部署,对国内,国外用户进行分流访问,以提升网站的访问速度.Github Pages 的部署前面已经说了,这里就讲一讲 Coding Pages 如何部署.其实与 Github Pages 也类似,先到 coding官网注册,创建一个与用户名同名的仓库,添加仓库地址到配置文件中,在根目录 _config.yml对应地方添加如下: 123456789# Deployment### Docs: https://hexo.io/docs/deployment.htmldeploy:- type: git repo: github: https://github.com/shw2018/shw2018.github.io.git # github 仓库地址 coding: https://git.dev.tencent.com/sunhwee/sunhwee.git # coding 仓库地址 branch: master- type: baidu_url_submitter 把本地生成 SSH 公匙添加到 Coding 这一步看我前面的教程,原理类似. 然后 hexo clean &amp;&amp; hexo g &amp;&amp; hexo d 部署上去就是了． 当然，部署上去后，你需要开启 page 服务. 你可以在 pages 设置里面自定义域名，区域名解析控制台，添加两条 CNAME 记录，将域名指向 RepoName.coding.me就可以的，申请 ssl 证书，强制开启 https 可能遇到的问题: ［coding pages 申请ssl 证书总是提示：错误！］这里提一句，如果你是 github pages 和 coding pages双部署，用同一个域名的话，可以将 xxx.github.io 解析成 境外, xxx.coding.me 解析成 默认,这个时候如果你之前就申请过 ssl 证书的话，再在 coding 里面申请 ssl证书会一直提示 失败,解决办法： 先去域名解析控制台，将境外解析的两条 CNAME 记录 暂停,过个五六分钟，回到 coding 点击申请 ssl,很快就会提示，申请成功！ 刚好我过程中遇到了这个问题，所以把它记下来，方便后面的小伙伴看到． 4. 一些注意事项 4.1 备份博客源文件 有时候我们想换一台电脑继续写博客，最简单的方法就是把博客整个目录拷贝过去，就是这么暴力。不过，这种方法有个问题就是要是那天电脑崩了，本地源文件丢失了，比较麻烦，所以这时候就可以将博客目录下的所有源文件都上传到 github上面。 首先在 github博客仓库下新建一个分支 hexo，然后 git clone到本地，把 .git文件夹拿出来，放在博客根目录下。 然后 git branch -b hexo切换到 hexo分支，然后 git add .，然后 git commit -m &quot;xxx&quot;，最后 git push origin hexo提交就行了。 具体效果可以看我的博客源文件仓库：传送门。 大家也可以先用下文 hexo安装方法安装完 hexo，然后直接 git clone -b hexo https://github.com/shw2018/shw2018.github.io.git克隆我的所有源文件，这是我目前修改完的基本没 bug的定制化的博客，可以直接拿来用。","link":"/abbrlink/6e8839eb.html"},{"title":"Internet Download Manager破解版","text":"软件介绍Internet Download Manager（简称IDM）是一个用于Windows系统的下载管理器。 IDM可以让用户自动下载某些类型的文件，可将文件划分为多个下载点以更快下载，并行出最近的下载，方便访问文件。相对于其他下载管理器，具有独特的动态文件分割技术。 其优点在于，能分析下载地址中的实际地址，但若地址无效时则跳换成失效网页，当地址重新有效而无法恢复成原来的地址。 而缺点在于，必须设置分段的临时文件存放的磁盘位置，下载完成后再自动合并成一个完整的文件，同时删除临时文件（这种做法不同于其他下载软件预先分配一整块磁盘空间）。所以，下载的如果是机密文件，就容易被数据恢复软件恢复，造成安全隐患。 IDM可被调用于Internet Explorer、Safari、Google Chrome、Opera、Netscape Navigator以及Mozilla Firefox（火狐）浏览器中。","link":"/abbrlink/33ca5be3.html"},{"title":"Mega网盘不限速下载","text":"MegaDownloader介绍MegaDownloader 是一个用于从Mega.nz下载文件的免费开源应用程序。Mega.nz是一个云存储服务，提供大容量的免费和付费存储空间。MegaDownloader旨在简化从Mega.nz下载文件的过程，并提供一些额外的功能。请注意，使用第三方应用程序可能违反Mega.nz的使用条款，因此使用前请务必查阅相关条款并确保合规。 界面 下载MegaDownloader_v1.8.exe","link":"/abbrlink/c833a74a.html"},{"title":"Renpy专用游戏汉化软件合集","text":"软件均来自网络 前言​ 越来越多的Ren·Py引擎开发的视觉游戏涌入网络，而这一大部分游戏都需要翻译，但是翻译游戏毕竟是由人工翻译完成的，需要时间。有不少的人忍不住就是想玩最新的，因此各个汉化组也就开发了一个个针对Ren`Py引擎开发的游戏的翻译软件。 了解Ren`Py游戏Ren’Py几乎支持所有视觉小说所应该具有的功能，包括分支故事、存储和加载游戏、回退到之前故事的存储点、多样性的场景转换等。 Ren’Py拥有类似电影剧本的语法，并且能够允许高级用户编写Python代码来增加新的功能。除此之外，游戏引擎内附的出版工具能够为脚本加密以及压缩游戏素材以防止盗版。 Ren’Py建构于Pygame，它基于Python和SDL。 Ren’Py官方支持Windows、Linux以及较新版Mac OS X，并可通过Arch Linux、Ubuntu、Debian或Gentoo的软件包管理系统安装Linux包中。它也已被移植到Android、OpenBSD以及iOS 7预发布版本。 利用Ren’Py结合剧本及Python，非常适合制作冒险游戏，也可以制作出模拟游戏、扑克游戏等类型游戏。Ren’Py也有一些电子角色扮演游戏框架的示例，但相对来说，制作RPG游戏会比较困难。而对比吉里吉里，它甚至支持3D加速的功能。 实时翻译软件EeasyTranslation for RENPY 不保证所有Ren`Py引擎开发的游戏都可以用 18ACG翻译姬 不保证所有Ren`Py引擎开发的游戏都可以用 下载地址 无法保证为最新版 renpy游戏实时翻译https://liuji.lanzoui.com/b06artmuf 密码:ed00","link":"/abbrlink/4ba8f988.html"},{"title":"Kali Linux 虚拟机开启SSH服务","text":"前置准备换源以Kali Linux为例, 修改源文件 1sudo vim /etc/apt/sources.list 修改为: 1234567891011121314151617# 官方源deb http://http.kali.org/kali kali-rolling main contrib non-freedeb-src http://http.kali.org/kali kali-rolling main contrib non-free# 网易源deb http://mirrors.163.com/debian/ stretch main non-free contribdeb http://mirrors.163.com/debian/ stretch-updates main non-free contribdeb http://mirrors.163.com/debian/ stretch-backports main non-free contribdeb-src http://mirrors.163.com/debian/ stretch main non-free contribdeb-src http://mirrors.163.com/debian/ stretch-updates main non-free contribdeb-src http://mirrors.163.com/debian/ stretch-backports main non-free contribdeb http://mirrors.163.com/debian-security/ stretch/updates main non-free contribdeb-src http://mirrors.163.com/debian-security/ stretch/updates main non-free contrib# 阿里云deb https://mirrors.aliyun.com/kali kali-rolling main non-free contribdeb-src https://mirrors.aliyun.com/kali kali-rolling main non-free contrib 更新Apt缓存 1sudo apt update 虚拟机须知最好不要将虚拟机的网卡的连接方式设置为网络地址转换(NAT), 不然你ifconfig获取到的虚拟机ip为虚拟ip地址 开启SSH第一步: 修改SSH配置文件1sudo leafpad /etc/ssh/sshd_config 不出意料的话, 它会让你安装程序, 一路y/yes就可以了.如果出了意外, 那就自行安装sudo apt-get install ssh, 然后再次运行上面的命令 然后根据下述信息, 进行Ctrl+F进行搜索修改 1234Port 22ListenAddress 0.0.0.0ListenAddress ::PermitRootLogin yes 第二步: 设置为开机自启1systemctl enable ssh 查看SSH状态1systemctl status ssh.service","link":"/abbrlink/3f03cfce.html"},{"title":"Windows 10搜索框支持设置圆角 正式版用户可修改注册表设置","text":"早在 Windows 10 Version 1803 开始微软就在测试分离微软小娜与搜索框以及将搜索框变成圆角的样式等。 不过在后来的更新中不知道是什么原因导致微软未推出此功能，不过用户倒是可以修改注册表完成这项修改。 蓝点网测试此功能已经支持 Windows 10 Version 1903 版，之前版本的用户也可以尝试修改看看是否支持。 具体设置教程如下： 1、win+s打开搜索框，搜索注册表点击进入注册表；或者win+r输入regedit，回车进入注册表 2、在注册表的一栏上填写以下路径，回车即可 1计算机\\HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Search 3、在右边空白处右键新建DWORD 32-bit 值，并将其命名为ImmersiveSearch，再修改键值为1 4、在注册表的一栏上填写以下路径，回车即可 1计算机\\HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Search\\Flighting\\ 5、在左边Flighting上右键新建文件夹Override，并点击进入 6、在右边空白处右键新建DWORD 32-bit 值，并将其命名为ImmersiveSearchFull，再修改键值为1 7、在右边空白处右键新建DWORD 32-bit 值，并将其命名为CenterScreenRoundedCornerRadius，再修改键值为9 那么这就完成对win10搜索框的圆角美化","link":"/abbrlink/a6f304f7.html"},{"title":"hexo-theme-matery主题优化","text":"转载自 这么些年的技术总结 版权归作者所有 基于hexo-theme-matery做的个性化美化,仅代表个人审美,我们先来看几个效果截图 页面配色修改顶部导航栏颜色,底部状态栏颜色,顶部导航栏右上角github图标颜色hexo-theme-matery原来主题Banner头图都是偏紫色系,因此个人觉得原来主题顶部和底部的绿色状态来显示的很突兀.对比如下: 查找方法基本就是打开chrome浏览器的检查,选择想要查看的页面元素,然后看他的Style文件,找到关键词之后去hexo-theme-matery主题的css文件中查找后修改即可,这个基本没什么难度。 打开 matery/source/css/matery.css 文件 搜索 .bg-color 大概在198行修改background-image属性中linear-gradient内的值即可改成你自己想要的颜色 123.bg-color { background-image: linear-gradient(to right,#623AA2 0%,#F97794 100%);} 之后顶部导航栏颜色,底部状态栏颜色都会改变了 然后是github右上角的角标。这个通过浏览器搜索可以定位到标签,但在 matery.css 内却找不到关于颜色的标签控制器。因此推断,这个地方的颜色控制没有写在该文件中,理由是因为这个是个性化的配置,而matery.csw这个文件主打的是全局配置,一般多个地方都会用到的样式才会写到这里,因此需要去读源码了。我们先看看 layout中 123$ ls_partial about.ejs categories.ejs friends.ejs gallery.ejs layout.ejs tag.ejs_widget archive.ejs category.ejs galleries.ejs index.ejs post.ejs tags.ejs 貌似没有相关的,再看看 _partial 目录下 123456$ lsback-top.ejs gitalk.ejs header.ejs paging.ejs prev-next.ejs social-link-simple.ejsbg-cover-content.ejs github-link.ejs index-cover.ejs post-cover.ejs reprint-statement.ejs social-link.ejsbg-cover.ejs gitment.ejs livere.ejs post-detail-toc.ejs reward.ejs valine.ejsdisqus.ejs google-analytics.ejs mobile-nav.ejs post-detail.ejs search.ejsfooter.ejs head.ejs navigation.ejs post-statis.ejs share.ejs 有一个与github相关的 github-link.ejs,打开查看发现原来配置就在这里,第15行左右 123456.github-corner svg { color: #F062A7; fill: #fff; height: 64px; width: 64px;} 我们修改 color 的属性值就可以随心所欲的改变github角标的颜色。 主题中跳转连接都指向自己的github这个在主题的配置文件中 1234# Whether to display fork me on github icon and link, default true, You can change it to your repo address # 配置是否在 header 中显示 fork me on github 的图标，默认为true，你可以修改为你的仓库地址. githubLink: enable: true 网站底部还有一部分连接 12345678910111213141516-------------------------- layout/_partial/footer.ejs --------------------------index 8b051a7..1630d35 100755@@ -1,12 +1,7 @@ &lt;footer class=&quot;page-footer bg-color&quot;&gt; &lt;div class=&quot;container row center-align&quot;&gt; &lt;div class=&quot;col s12 m8 l8 copy-right&quot;&gt;- Copyright&amp;nbsp;&amp;copy;- &lt;span id=&quot;year&quot;&gt;年份&lt;/span&gt;- &lt;a href=&quot;&lt;%- config.url %&gt;&quot; target=&quot;_blank&quot;&gt;&lt;%- config.author %&gt;&lt;/a&gt;- |&amp;nbsp;Powered by&amp;nbsp;&lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot;&gt;Hexo&lt;/a&gt;- |&amp;nbsp;Theme&amp;nbsp;&lt;a href=&quot;https://github.com/blinkfox/hexo-theme-matery&quot; target=&quot;_blank&quot;&gt;Matery&lt;/a&gt;- &lt;br&gt;+ &amp;nbsp;&amp;copy;&lt;span id=&quot;year&quot;&gt;2019&lt;/span&gt; &lt;% if (theme.wordCount.totalCount) { %&gt; &amp;nbsp;&lt;i class=&quot;fas fa-chart-area&quot;&gt;&lt;/i&gt;&amp;nbsp;站点总字数:&amp;nbsp;&lt;span class=&quot;white-color&quot;&gt;&lt;%= totalcount(site) %&gt;&lt;/span&gt;&amp;nbsp;字 背景图、头图、轮播图、头像、站点图标都替换成自己喜欢的这个在themes/matery/source/medias目录下面,找到图标替换成同名的即可。轮播图的位置在 themes/matery/source/medias/banner 只用放七张就好,代码逻辑是每天换一 去掉wordcloud功能 修改 layout/tags.ejs 内容为如下代码 12345678910111213141516171819&lt;%- partial('_partial/bg-cover') %&gt;&lt;main class=&quot;content&quot;&gt; &lt;%- partial('_widget/category-cloud') %&gt; &lt;% if (site.tags &amp;&amp; site.tags.length &gt; 0) { %&gt; &lt;%- partial('_widget/tag-wordcloud') %&gt; &lt;% } %&gt;&lt;!-- &lt;%- partial('_widget/tag-cloud') %&gt; &lt;% if (site.categories &amp;&amp; site.categories.length &gt; 0) { %&gt; &lt;%- partial('_widget/category-radar') %&gt; &lt;% } %&gt;--&gt; &lt;%- partial('_widget/post-charts') %&gt;&lt;/main&gt; 其目的是把标签、分类两个页面合二唯一,将所有关于文件分类统计的内容都放到标签页面，这样可以省出一个标签的位置来，顶部导航栏也不会太拥挤,效果如下 添加百度统计添加百度统计可以看到自己网站的访问情况等等 先去注册个百度统计账号，然后管理-代码管理里面可以看到安装方法 同时在底部添加一个超链接可以直接连接到百度云统计,这样很方便的可以查看自己网站的访问情况 自适应屏幕的时候字体大小修改matery/source/css/matery.css,这样在手机等小屏幕上显示的字体大小就正常了,否则会因为标题字太长导致换行 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061---------------------------- source/css/matery.css ----------------------------/*全局基础样式*//*小屏幕下(手机类)的样式*/@media only screen and (max-width: 601px) { .container { width: 95%; } header .brand-logo .logo-span { font-size: 1rem; } .bg-cover .title { font-size: 3rem; font-weight: 700; line-height: 1.85em; margin-bottom: 20px; position: relative; }}/*中等屏幕下(平板类)的样式*/@media only screen and (min-width: 600px) and (max-width: 992px) { .container { width: 90%; } header .brand-logo .logo-span { font-size: 2rem; } .bg-cover .title { font-size: 4rem; font-weight: 700; line-height: 1.85em; margin-bottom: 20px; position: relative; }}/*大屏幕下(桌面类)的样式*/@media only screen and (min-width: 993px) { .container { width: 85%; max-width: 1125px; } .post-container { width: 90%; margin: 0 auto; max-width: 1250px; } header .brand-logo .logo-span { font-size: 2rem; } .bg-cover .title { font-size: 4rem; font-weight: 700; line-height: 1.85em; margin-bottom: 20px; position: relative; }} 每日一言 上面 嗷呜 下的内容是动态生成的，增加网站的趣味性 12345678--------------------------- layout/_widget/dream.ejs ---------------------------&lt;div class=&quot;row&quot;&gt; &lt;div class=&quot;col l8 offset-l2 m10 offset-m1 s10 offset-s1 center-align text&quot;&gt; &lt;span id=&quot;hitokoto&quot;&gt;&lt;%- theme.dream.text %&gt;&lt;/span&gt; &lt;script src=&quot;https://v1.hitokoto.cn/?encode=js&amp;select=%23hitokoto&quot; defer&gt;&lt;/script&gt; &lt;/div&gt; &lt;/div&gt; 每日诗词 123456789101112131415161718192021--------------------- layout/_partial/bg-cover-content.ejs --------------------- &lt;div class=&quot;description center-align&quot;&gt; &lt;% if (theme.subtitle.enable) { %&gt; &lt;span id=&quot;subtitle&quot;&gt;&lt;/span&gt; &lt;script src=&quot;https://cdn.jsdelivr.net/npm/typed.js@2.0.11&quot;&gt;&lt;/script&gt; &lt;script&gt; var typed = new Typed(&quot;#subtitle&quot;, { strings: ['&lt;%= theme.subtitle.sub1 %&gt;','&lt;%= theme.subtitle.sub2 %&gt;'], startDelay: &lt;%= theme.subtitle.startDelay %&gt;, typeSpeed: &lt;%= theme.subtitle.typeSpeed %&gt;, loop: &lt;%= theme.subtitle.loop %&gt;, backSpeed: &lt;%= theme.subtitle.backSpeed %&gt;, showCursor: &lt;%= theme.subtitle.showCursor %&gt; }); &lt;/script&gt; &lt;span id=&quot;jinrishici-sentence&quot;&gt;&lt;%= config.description %&gt;&lt;/span&gt; &lt;script src=&quot;https://sdk.jinrishici.com/v2/browser/jinrishici.js&quot; charset=&quot;utf-8&quot;&gt; &lt;/script&gt; &lt;% } else { %&gt; &lt;%= config.description %&gt; &lt;% } %&gt; 添加文章显示作者名字 123456789---------------------- layout/_partial/post-detail.ejs -----------------------&lt;div class=&quot;info-break-policy&quot;&gt; &lt;% if (page.author &amp;&amp; page.author.length &gt; 0) { %&gt; &lt;i class=&quot;fa fa-pencil&quot;&gt;&lt;/i&gt; 作者: &lt;%- page.author %&gt; &lt;% } else { %&gt; &lt;i class=&quot;fa fa-pencil&quot;&gt;&lt;/i&gt; 作者: &lt;%- config.author %&gt; &lt;% } %&gt;&lt;/div&gt; 自动生成分类hexo-enchancer 无法配置生成的目录深度,所以选择了 hexo-auto-category 使用教程参考: https://blog.eson.org/pub/e2f6e239/","link":"/abbrlink/169e3c65.html"},{"title":"代码压缩的两种方法","text":"代码压缩的两种方法Gulp压缩 最常用的方法 第一步: 安装Gulp的各种小功能模块1npm install gulp gulp-htmlclean gulp-htmlmin gulp-minify-css gulp-uglify gulp-imagemin --save 安装额外的功能模块 1npm install gulp-debug gulp-clean-css gulp-changed gulp-if gulp-plumber gulp-babel babel-preset-es2015 del @babel/core --save 第二步: 创建 gulpfile.js文件123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168var gulp = require(&quot;gulp&quot;);var debug = require(&quot;gulp-debug&quot;);var cleancss = require(&quot;gulp-clean-css&quot;); //css压缩组件var uglify = require(&quot;gulp-uglify&quot;); //js压缩组件var htmlmin = require(&quot;gulp-htmlmin&quot;); //html压缩组件var htmlclean = require(&quot;gulp-htmlclean&quot;); //html清理组件var imagemin = require(&quot;gulp-imagemin&quot;); //图片压缩组件var changed = require(&quot;gulp-changed&quot;); //文件更改校验组件var gulpif = require(&quot;gulp-if&quot;); //任务 帮助调用组件var plumber = require(&quot;gulp-plumber&quot;); //容错组件（发生错误不跳出任务，并报出错误内容）var isScriptAll = true; //是否处理所有文件，(true|处理所有文件)(false|只处理有更改的文件)var isDebug = true; //是否调试显示 编译通过的文件var gulpBabel = require(&quot;gulp-babel&quot;);var envPreset = require(&quot;babel-preset-env&quot;);var del = require(&quot;del&quot;);var Hexo = require(&quot;hexo&quot;);var hexo = new Hexo(process.cwd(), {}); // 初始化一个hexo对象// 清除public文件夹gulp.task(&quot;clean&quot;, function () { return del([&quot;public/**/*&quot;]);});// 下面几个跟hexo有关的操作，主要通过hexo.call()去执行，注意return// 创建静态页面 （等同 hexo generate）gulp.task(&quot;generate&quot;, function () { return hexo.init().then(function () { return hexo .call(&quot;generate&quot;, { watch: false }) .then(function () { return hexo.exit(); }) .catch(function (err) { return hexo.exit(err); }); });});// 启动Hexo服务器gulp.task(&quot;server&quot;, function () { return hexo .init() .then(function () { return hexo.call(&quot;server&quot;, {}); }) .catch(function (err) { console.log(err); });});// 部署到服务器gulp.task(&quot;deploy&quot;, function () { return hexo.init().then(function () { return hexo .call(&quot;deploy&quot;, { watch: false }) .then(function () { return hexo.exit(); }) .catch(function (err) { return hexo.exit(err); }); });});// 压缩public目录下的js文件gulp.task(&quot;compressJs&quot;, function () { return gulp .src([&quot;./public/**/*.js&quot;, &quot;!./public/libs/**&quot;, &quot;!*.min.js&quot;]) //排除的js .pipe(gulpif(!isScriptAll, changed(&quot;./public&quot;))) .pipe(gulpif(isDebug, debug({ title: &quot;Compress JS:&quot; }))) .pipe(plumber()) .pipe( gulpBabel({ presets: [envPreset] // env检查机制 }) ) .pipe(uglify()) //调用压缩组件方法uglify(),对合并的文件进行压缩 .pipe(gulp.dest(&quot;./public&quot;)); //输出到目标目录});// 压缩public目录下的css文件gulp.task(&quot;compressCss&quot;, function () { var option = { rebase: false, //advanced: true, //类型：Boolean 默认：true [是否开启高级优化（合并选择器等）] compatibility: &quot;ie7&quot; //保留ie7及以下兼容写法 类型：String 默认：''or'*' [启用兼容模式； 'ie7'：IE7兼容模式，'ie8'：IE8兼容模式，'*'：IE9+兼容模式] //keepBreaks: true, //类型：Boolean 默认：false [是否保留换行] //keepSpecialComments: '*' //保留所有特殊前缀 当你用autoprefixer生成的浏览器前缀，如果不加这个参数，有可能将会删除你的部分前缀 }; return gulp .src([&quot;./public/**/*.css&quot;, &quot;!./public/**/*.min.css&quot;]) //排除的css .pipe(gulpif(!isScriptAll, changed(&quot;./public&quot;))) .pipe(gulpif(isDebug, debug({ title: &quot;Compress CSS:&quot; }))) .pipe(plumber()) .pipe(cleancss(option)) .pipe(gulp.dest(&quot;./public&quot;));});// 压缩public目录下的html文件gulp.task(&quot;compressHtml&quot;, function () { var cleanOptions = { protect: /&lt;\\!--%fooTemplate\\b.*?%--&gt;/g, //忽略处理 unprotect: /&lt;script [^&gt;]*\\btype=&quot;text\\/x-handlebars-template&quot;[\\s\\S]+?&lt;\\/script&gt;/gi //特殊处理 }; var minOption = { collapseWhitespace: true, //压缩HTML collapseBooleanAttributes: true, //省略布尔属性的值 &lt;input checked=&quot;true&quot;/&gt; ==&gt; &lt;input /&gt; removeEmptyAttributes: true, //删除所有空格作属性值 &lt;input id=&quot;&quot; /&gt; ==&gt; &lt;input /&gt; removeScriptTypeAttributes: true, //删除&lt;script&gt;的type=&quot;text/javascript&quot; removeStyleLinkTypeAttributes: true, //删除&lt;style&gt;和&lt;link&gt;的type=&quot;text/css&quot; removeComments: true, //清除HTML注释 minifyJS: true, //压缩页面JS minifyCSS: true, //压缩页面CSS minifyURLs: true //替换页面URL }; return gulp .src(&quot;./public/**/*.html&quot;) .pipe(gulpif(isDebug, debug({ title: &quot;Compress HTML:&quot; }))) .pipe(plumber()) .pipe(htmlclean(cleanOptions)) .pipe(htmlmin(minOption)) .pipe(gulp.dest(&quot;./public&quot;));});// 压缩 public/medias 目录内图片gulp.task(&quot;compressImage&quot;, function () { var option = { optimizationLevel: 5, //类型：Number 默认：3 取值范围：0-7（优化等级） progressive: true, //类型：Boolean 默认：false 无损压缩jpg图片 interlaced: false, //类型：Boolean 默认：false 隔行扫描gif进行渲染 multipass: false //类型：Boolean 默认：false 多次优化svg直到完全优化 }; return gulp .src(&quot;./public/medias/**/*.*&quot;) .pipe(gulpif(!isScriptAll, changed(&quot;./public/medias&quot;))) .pipe(gulpif(isDebug, debug({ title: &quot;压缩 Images:&quot; }))) .pipe(plumber()) .pipe(imagemin(option)) .pipe(gulp.dest(&quot;./public&quot;));});// 执行顺序： 清除public目录 -&gt; 产生原始博客内容 -&gt; 执行压缩混淆 -&gt; 部署到服务器gulp.task( &quot;build&quot;, gulp.series( &quot;clean&quot;, &quot;generate&quot;, &quot;compressHtml&quot;, &quot;compressCss&quot;, &quot;compressJs&quot;, &quot;compressImage&quot;, gulp.parallel(&quot;deploy&quot;) ));// 默认任务gulp.task( &quot;default&quot;, gulp.series( &quot;clean&quot;, &quot;generate&quot;, gulp.parallel(&quot;compressHtml&quot;, &quot;compressCss&quot;, &quot;compressJs&quot;,&quot;compressImage&quot;) ));//Gulp4最大的一个改变就是gulp.task函数现在只支持两个参数，分别是任务名和运行任务的函数 neat压缩最便携的方式使用插件 hexo-neathexo-neat 优化提速插件（去掉HTML、css、js的blank字符） 第一步: 安装 hexo-neat1npm install hexo-neat --save 第二步: 在站点配置文件 _config.yml中进行插件配置12345678910111213141516171819202122# near压缩启动neat_enable: true# 压缩htmlneat_html: enable: true exclude: - &quot;**/*.md&quot;# 压缩cssneat_css: enable: true exclude: - &quot;**/*.min.css&quot;# 压缩jsneat_js: enable: true mangle: true output: compress: exclude: - &quot;**/*.min.js&quot; - &quot;**/**/instantpage.js&quot; - &quot;**/matery.js&quot; 注意 压缩 md 文件会使 markdown 语法的代码块消失 会删除全角空格","link":"/abbrlink/85a288c1.html"},{"title":"六记de杂货铺","text":"六记の杂货铺由永硕E盘搭建索引目录网站 六记の杂货铺","link":"/abbrlink/64cfbea0.html"},{"title":"奇怪的继承","text":"python2中才有经典类，没有继承object的类都是经典类。python3中都是新式类，继承object类的都是新式类，py3中默认继承object类。 Python3中的继承 钻石继承 123456graph TDA--&gt;|B继承A| BA--&gt;|C继承A| CB--&gt;|D继承B| DC--&gt;|D继承B| DF[钻石继承] 12345678910class A: def h(self):print('a')class B(A): def h(self):print('b')class C(A): def h(self):print('c')class D(B,C): def h(self):print('d')d = D()d.h() A B(A) C(A) D(C,B) 输出 有 有 有 有 D 有 有 有 无 C 有 有 无 无 B 有 无 无 无 A U型继承 123456graph TDA--&gt;|B继承A| BE--&gt;|C继承E| CB--&gt;|D继承B| DC--&gt;|D继承B| DF[U型] 继承顺序：B–&gt;A–&gt;C–&gt;E 12345678graph TDF--&gt;|A继承F| AF--&gt;|E继承F| EA--&gt;|B继承A| BE--&gt;|C继承E| CB--&gt;|D继承B| DC--&gt;|D继承B| DG[乌龟继承] 继承顺序：B–&gt;A–&gt;C—&gt;E–&gt;F 可以通过mro()来实现查看继承顺序，继承顺序遵循的是广度优先算法 Python2中的继承 继承顺序遵循的是深度优先算法(从左向右查找，一条分支找到底，若果没找到就去另一条分支继续找) 12345678graph TDF--&gt;|A继承F| AF--&gt;|E继承F| EA--&gt;|B继承A| BE--&gt;|C继承E| CB--&gt;|D继承B| DC--&gt;|D继承B| DG[乌龟继承] 继承顺序：B–&gt;A–&gt;F—&gt;C–&gt;E 补充 super() 只存在于Python3当中‘mro() 只存在与新式类","link":"/abbrlink/ad2743d7.html"},{"title":"小米路由器POST登录分析及实现过程","text":"前情提要:当前分析的样本为 小米路由器千兆版 分析POST提交数据 通过Google浏览器,使用F12(开发者工具)中的Network爬取post数据 图1.获取到的post数据 分析可知 username为admin[明文] password为**************[密文,当然这里也不可能写出来] logtype为2[明文] nonce为生成的文本,为0_MAC地址_不清楚__不清楚 分析源代码 路由器登录地址为 192.168.31.1 或者 miwifi.com 通过Google浏览器,使用Ctrl+U(查看源代码) 分析可知 登录数据加密函数为**function loginHandle ( e ) **—位置为1269[每个人的可能不一样] 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849function loginHandle ( e ) { e.preventDefault(); var formObj = document.rtloginform; var pwd = $( '#password' ).val(); if ( pwd == '') { return; } var nonce = Encrypt.init(); var oldPwd = Encrypt.oldPwd( pwd ); var param = { username: 'admin', password: oldPwd, logtype: 2, nonce: nonce }; $.pub('loading:start'); var url = '/cgi-bin/luci/api/xqsystem/login'; $.post( url, param, function( rsp ) { $.pub('loading:stop'); var rsp = $.parseJSON( rsp ); if ( rsp.code == 0 ) { var redirect, token = rsp.token; if ( /action=wan/.test(location.href) ) { redirect = buildUrl('wan', token); } else if ( /action=lannetset/.test(location.href) ) { redirect = buildUrl('lannetset', token); } else { redirect = rsp.url; } window.location.href = redirect; } else if ( rsp.code == 403 ) { window.location.reload(); } else { pwdErrorCount ++; var errMsg = '密码错误'; if (pwdErrorCount &gt;= 4) { errMsg = '多次密码错误，将禁止继续尝试'; } Valid.fail( document.getElementById('password'), errMsg, false); $( formObj ) .addClass( 'shake animated' ) .one( 'webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend', function(){ $('#password').focus(); $( this ).removeClass('shake animated'); } ); } });} 分析函数第一步,获取pwd值1var pwd = $( '#password' ).val(); '获取id为password的输入框内的内容 第二步,获取nonce值1var nonce = Encrypt.init(); ' 调用Encrypt函数中的init函数(?) Encrypt函数中的init 123456init: function(){ var nonce = this.nonceCreat(); '调用nonceCreat this.nonce = nonce; return this.nonce; '返回 this.nonce}, nonceCreat 12345678910111213nonceCreat: function(){ var type = 0; 'type为0 var deviceId = 'c6:8e:68:c1:1d:5e'; 'deviceId为c6:8e:68:c1:1d:5e 电脑的MAC地址 var time = Math.floor(new Date().getTime() / 1000); 'time为 当前毫秒数/1000 的 浮点数 var random = Math.floor(Math.random() * 10000); 'random为 获取随机数的1万倍 的 浮点数 return [type, deviceId, time, random].join('_'); '返回 type deviceId time random '返回 0_c6:8e:68:c1:1d:5e_当前时间_随机数}, 所以nonce等于0_c6:8e:68:c1:1d:5e_当前时间__随机数 1var oldPwd = Encrypt.oldPwd( pwd ); '调用Encrypt函数中的oldPwd Encrypt函数中的oldPwd 1234oldPwd : function(pwd){ return CryptoJS.SHA1(this.nonce + CryptoJS.SHA1(pwd + this.key).toString()).toString(); '返回 sha1加密(nonce + sha1加密(密码+key))}, 第三步,获取POST数据123456var param = { username: 'admin', password: oldPwd, logtype: 2, nonce: nonce}; 与之前获取的POST数据进行对比 即可得到结果-Form Data 实现过程 下次再实现,这次就分析到这里","link":"/abbrlink/5b142f8.html"},{"title":"影视资源收集","text":"所有资源均来自于网络 前言众所周知，互联网精神就是共享资源。而有很多所谓免费的影视资源站，充斥着数不过来的被加上广告水印的劣质视频，作为一个业余的影视爱好者而言，这无疑是非常不爽的。 百度云资源如下 不定时更新 【影/剧】名侦探柯南 名称 百度云 名侦探柯南剧场版全20集 百度云 提取码：pyko 名侦探柯南全837集 百度云 提取码：2x88 【影】哆啦A梦 名称 百度云 哆啦À梦[国粤日三语]系列39部 百度云 提取码：rkkf 哆啦À梦 2005-2023年度新番合集 夸克网盘 哆啦À梦 2005-2023年度新番合集 阿里网盘 【影】黑客帝国 名称 百度云 黑客帝国全3部 百度云 提取码：ieau 【影】漫威 名称 百度云 漫威电影合集24部 百度云 提取码：piyn 漫威电影52部 百度云 提取码：ujj0 漫威电影21部 百度云 提取码：fkmi 【影】DC 名称 百度云 DC电影24部 百度云 提取码：mtsb 目前就收集到这里 20/04/05 【剧】比宇宙更远的地方 名称 百度云 比宇宙更远的地方 百度云 提取码：0u12 【剧】哥谭 名称 百度云 哥谭1-4季 百度云 提取码：nmej 哥谭第5季 百度云 提取码：gexr 【剧】大群 名称 百度云 大群第1季 百度云 大群第2季 百度云 大群第3季 百度云 【剧】天赋异禀 名称 百度云 天赋异禀第1季 百度云 天赋异禀第2季 百度云 【影】陆小凤传奇 名称 百度云 陆小凤传奇全10部 百度云 目前就收集到这里 20/04/10 【剧】老爸老妈浪漫史 名称 百度云 老爸老妈浪漫史全9季 百度云 【剧】犯罪心理 名称 百度云 犯罪心理1-12季 百度云 犯罪心理全14季 百度云 提取码：ts9g 【影】教父 名称 百度云 教父全3部 百度云 【影】上帝也疯狂 名称 百度云 上帝也疯狂全5部 百度云 【影】警察故事 名称 百度云 警察故事全6部 百度云 提取码：0ue6 【影】功夫熊猫 名称 百度云 功夫熊猫全3部 百度云 提取码：bm1m 目前就收集到这里 20/04/12 演员合集周星驰 名称 百度云 【影】周星驰42部 百度云 提取码：z7sb 成龙 百度云 【影】成龙80部 百度云 提取码：w2p5","link":"/abbrlink/32cf7813.html"},{"title":"推荐wordpress主题","text":"版权归主题作者所有 所有资源来源于网络，版权属于原作者所有！仅供学习参考。 01 【免费开源】smarty_hankin 主题来自于hankin 如果网址打不开，请自行百度 主题示意图 下载地址 码云https://gitee.com/theme-smarty/smarty_hankin/tags Githubhttps://github.com/hankin-han/smarty_hankin/releases 百度云https://pan.baidu.com/s/1I1S8TASU19HFvQyW4Womdw 百度云提取码：rqcf 02 【破解】niRvana · 轻拟物WordPress主题 主题来自于 Panda 博客版价格：￥360元 如果网址打不开，请自行百度 Panda的博客 有经济实力的可以去支持正版 主题示意图 下载地址 百度云https://pan.baidu.com/s/10r00XM0GvQNEK7K1aWhpaA 百度云提取吗：0cro 破解版本：v2.6.0 03 【破解】BlackGrid 黑格导航 主题来自 黑格导航 价格：￥499 如果网址打不开，请自行百度 黑格导航 有经济实力的可以去支持正版 主题示意图 下载地址 百度云https://pan.baidu.com/s/15PrrH_i_FTOfv5u6HpEHvg 百度云提取码：84qq","link":"/abbrlink/9d9da441.html"},{"title":"搞机之旅-Samsung Galaxy|C5|Lineage OS|Android 8.1","text":"LineageOS14包来自XDA LineageOS15包来自XDA LineageOS16包来自XDA 搞机必备 下载本人打包好的文件 蓝奏云 以及C5000ZHU1CRJ5 五件套【仅限16和15】 最后也就是ROM包LineageOS 14.1 for Samsung Galaxy C5LineageOS 15.1 for Samsung Galaxy C5LineageOS 16.0 for Samsung Galaxy C5 准备完成后，进入正题 开始搞机 思路如下：解锁→刷TWRP→刷ROM包→完成！！ 安装CROM Service APK【三星解锁工具】 路径：samsung_sm_c5000所有文件/CROM Service解锁/CROM Service[三星解锁].apk 解除FRP 锁【也就是查找我的手机】 进入Download模式【就是挖煤模式、线刷模式。方法如下：关机状态下，按 音量下键+HOME键+电源键 】，然后连接电脑 打开Odin【三星刷机工具】 刷入港版C5000ZHU1CRJ5五件套，待刷新重启后，进入手机升级页面，完成后，立即进入Download模式【仅限刷16和15时】 选择AP，选择TWRP包【我收集了两个，都是3.2的，随便选一个就可以了】 按 音量下键+电源键 重启【大概6秒】，之后迅速，按下 音量上键+HOME键+电源键 【没按住，也不用慌，长按电源键，黑屏后，再重复之前的操作】进入TWRP界面 安装 LineageOS 14/15/16.0 for Samsung Galaxy C5 ROM包 结果截图 LineageOS 14.1 14不配拥有图片 LineageOS 15.1 LineageOS 16.0 扩展-五件套下载方法1： 名称 C5000ZHU1CRJ5.7z 文件类型 压缩包 Onedrive链接·短链 http://t.cn/A67mEy7e 下载方法2： 名称 C5000ZHU1CRJ5_C5000ZZH1CRJ5_TGY.zip 文件类型 压缩包 百度链接 https://pan.baidu.com/s/1lx0FMuwoZhGT1ucEiAu5mQ 提取码 8wx8 下载方法3(不推荐)： 搞不懂这个网站到底让不让下载文件 名称 C5000ZHU1CRJ5_C5000ZZH1CRJ5_TGY.zip（可能） 文件类型 压缩包（可能） 外网链接 三星固件SAMMOBILE 后续故事 虽然不清楚你们会不会这个问题(电信卡无法打电话、收短信) 先Root，我推荐使用面具(Magisk) 安装ES文件管理器或者RE文件管理器 打开 /system/build.prop 找到ro.telephony.default_network=1 将“1”改为“22”，“10“，”9” 重启手机，之后重置WLAN,移动数据和蓝牙设置 亲测LineageOS 16.0无法通过这个方法修复电信不能打电话、接电话、收短信、发短信","link":"/abbrlink/ad431137.html"},{"title":"文件蜈蚣自动激活程序","text":"ACG-Q/UserPyPackage at activation_codes_filecxx activation_codes_filecxx介绍参考 Uber-Eins/FileCentipede-Automatic-Activation: 一个简单的文件蜈蚣(半)自动激活程序 完成的GUI版自动激活工具 功能 开机自启 循环检测 集成FileCentipede-Automatic-Activation的自动激活 下载File Centipede Automatic Activation-0.4","link":"/abbrlink/2336bb27.html"},{"title":"斐讯K2路由器的救砖之旅-编程器救砖","text":"前言之前K2路由不是刷了号称怎么刷都不死的不死鸟Bread，结果在切换固件的时候，貌似刷出问题了，就重刷了几次，再然后就没有然后了，斐讯K2路由器宣告GG。 这不最近疫情还没结束，再网上翻到几篇关于K2救砖的帖子，反正都差不多，就是拆闪存-&gt;用编程器烧录固件-&gt;再把闪存焊上去就ok了，很简单对吧。 准备工作 请确保拥有充足的电量，当然这个问题一般人都不会犯的 一台变成砖头的K2 一台Windows操作系统的电脑 CH341A编程器 开始救砖第一步：K2拆机去掉写有K码的封条，再卸掉两颗螺丝 再拆开外壳就可以看到路由器内部了 第二步：工具组合 CH341A编程器以及转接板和夹子 第三步：连接闪存 第四步：连接电脑将编程器连接到电脑上，打开CH341A编程器软件。如果没有安装驱动，那就得先按驱动再打开软件。顺便说一下，接下来用到的软件以及固件都会在最下方分享出来。 编程完毕后，可以校验一下，查看写入是否出错，一般来说，这种写入出错情况是不可能出现的，但万一呢？ PS.刷入的固件名称为：k2_163_v19_breed.bin 第五步：更新固件不知道，其他人刷完是什么情况。 反正我刷完 k2_163_v19_breed.bin 固件后，没法直接进入路由器管理界面，只能进入 Breed Web界面。按道理来说，这个固件是官改固件集成Breed的，所以应该刷完后，是可以直接进入路由器管理的。 不过都已经进入Breed Web界面了，也不在乎路由器固件有没有刷成功。 接下来，就可以刷 官方、官改、第三方的路由器固件了 分享 编程器软件以及相关驱动，固件 蓝奏云","link":"/abbrlink/3d253b0b.html"},{"title":"[Github项目] 甩锅侠","text":"jBlame someone else for your bad code. git-blame-someone-else快速甩锅给你(不)认识的人 安装123$ git clone https://github.com/jayphelps/git-blame-someone-else.git$ cd git-blame-someone-else$ sudo make install 使用1$ git blame-someone-else &lt;背锅侠&gt; &lt;commit&gt; 危害以及如何防护👨‍💻 震惊！竟然有人在 GitHub 上冒充我的身份！","link":"/abbrlink/64d331f9.html"},{"title":"第一篇","text":"终于搭建完成 于 20/01/10 搭建完成","link":"/abbrlink/73626faf.html"},{"title":"自动化部署Hexo博客","text":"前言 各行各业都在往自动化靠拢, 我也要来蹭一波自动化. 🚩那就让我们开始吧生成Key如果你的 Hexo 可以正常地部署到 GitHub，那么实际上你原来的秘钥是可以正常使用的。但是我的私钥还用于不同的服务器的 SSH 访问和其他身份验证，因此，我们生成一个新的秘钥对来专门部署 Hexo。 SSH-KEYGEN命令生成器密钥类型:RSADSAECDSAED25519密钥长度:注释:生成命令生成的命令:function generateCommand(){var e=document.getElementById(\"keyType\").value,t=document.getElementById(\"keyLength\").value,n=document.getElementById(\"keyComment\").value,m=\"ssh-keygen -t \"+e+\" -b \"+t;\"\"!==n&&(m+=\" -C \"+n),document.getElementById(\"commandOutput\").innerHTML=m} 然后, 打开运行 Win + R, 输入 cmd, 运行上述命令👆这会在当前目录生成两个文件： 12github-deploy-key —— 私钥github-deploy-key.pub —— 公钥 GitHub 配置ENV当前环境为: Github Action运行环境网页地址: HEXO博客源码仓库/settings/secrets/actions Github Env: HEXO_DEPLOY_KEY生成KEY🔑 将 github-deploy-key文件的内容填写到 Actions secrets的 HEXO_DEPLOY_KEY的value值 Github Env: HEXO_DEPLOY_EMAIL \\ HEXO_DEPLOY_NAME如果本地上就可以正常运行Git程序, 那么这里就可以填写本地上的配置信息 配置完成后, 就可以进行下一步了🚀 GitHub 配置公钥当前地址为: Hexo博客仓库(xxxx.github.io)例如: 我的Hexo博客仓库就在https://github.com/ACG-Q/acg-q.github.io 网页地址: 仓库地址/settings/keys例如: https://github.com/ACG-Q/acg-q.github.io/settings/keys 将 github-deploy-key.pub文件的内容填写到 Deploy keys的 HEXO_DEPLOY_PUB的value值 创建工作流通过模板生成 选择任意模板, 即可, 这里点击 Gulp模板的 Set up this workflow按钮 修改工作流配置文件 然后就是点击 Start commit按钮, 根据提示进行填写, 最后点击 Commit new file按钮 自行创建(脚本更新于 2024年1月10日)创建 HEXO博客源码仓库/.github/workflows/auto-deploy.yml 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364name: Hexo Auto Deployon: push: branches: - mainjobs: build: runs-on: ubuntu-latest strategy: matrix: node-version: [16.x] steps: - name: 开始运行 uses: actions/checkout@v1 - name: 设置 Node.js ${{ matrix.node-version }} uses: actions/setup-node@v1 with: node-version: ${{ matrix.node-version }} - name: 安裝 Hexo CI run: | npm install hexo-cli -g - name: 缓存node_modules uses: actions/cache@v1 id: cache-dependencies with: path: node_modules key: ${{runner.OS}}-${{hashFiles('**/package.json')}} - name: 安装环境 if: steps.cache-dependencies.outputs.cache-hit != 'true' run: | npm install - name: 完成 Git 配置 env: ACTION_DEPLOY_KEY: ${{ secrets.HEXO_DEPLOY_KEY }} ACTION_DEPLOY_EMAIL: ${{ secrets.HEXO_DEPLOY_EMAIL }} ACTION_DEPLOY_NAME: ${{ secrets.HEXO_DEPLOY_NAME }} run: | mkdir -p ~/.ssh/ echo &quot;$ACTION_DEPLOY_KEY&quot; &gt; ~/.ssh/id_rsa chmod 700 ~/.ssh chmod 600 ~/.ssh/id_rsa ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts git config --global user.email &quot;$ACTION_DEPLOY_EMAIL&quot; git config --global user.name &quot;$ACTION_DEPLOY_NAME&quot; - name: 部署博客 &amp;&amp; 复制一些额外的文件 env: ACTION_DEPLOY_EMAIL: ${{ secrets.HEXO_DEPLOY_EMAIL }} ACTION_DEPLOY_NAME: ${{ secrets.HEXO_DEPLOY_NAME }} run: | export TZ=&quot;Asia/Shanghai&quot; hexo clean &amp;&amp; hexo g cd ./public cp ../.initialize/public/.github ./ -rf cd ../ hexo deploy 工作流运行逻辑: 当我们推送内容到远程 master分支的时候，就会触发这个 Workflow 最后, 测试一波✨ 当然, 后面可以将 jobs.build.strategy.matrix.node-version的三个版本修改成一个版本 后续Gitalk全自动初始化 Gitalk 经过测试, Get✔ Gitment 理论上可行 在根目录(HEXO源码)下添加文件夹 .initialize 进入文件夹初始化Node项目(运行下述命令) 1npm init 小白版: 一路回车即可, 啥都不用管大神版: 懂得都懂 在文件夹中创建文件 gitalkInitialize.js 填写NodeJs脚本这个脚本来源于互联网, 作者未知📍, 已失效.经过我的修复, 已经可行了需要自行修改项: config - Github 配置信息, 例如: GitHub 用户名、GitHub Token等等 directory - 需要的初始化的网页, 例如: ‘/abbrlink/‘、’/list/‘ 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143const request = require(&quot;request&quot;);const fs = require(&quot;fs&quot;);const path = require(&quot;path&quot;);const url = require(&quot;url&quot;);const xmlParser = require(&quot;xml-parser&quot;);const cheerio = require(&quot;cheerio&quot;);var crypto = require('crypto');// 根据自己的情况进行配置const config = { username: &quot;&lt;Github UserName&gt;&quot;, // GitHub 用户名 token: &quot;&lt;GitHub Token&gt;&quot;, // GitHub Token repo: &quot;&lt;GitHub Comment&gt;&quot;, // 存放 issues的git仓库 // &quot;Gitalk&quot; or &quot;Gitment&quot; 连接的仓库 sitemapUrl: path.resolve(__dirname, &quot;../public/sitemap.xml&quot;), // sitemap.xml的路径，commit.js放置在根目录下，无需修改，其他情况自行处理 kind: &quot;Gitalk&quot;, // &quot;Gitalk&quot; or &quot;Gitment&quot;};let issuesUrl = `https://api.github.com/repos/${config.username}/${config.repo}/issues?`;let requestGetOpt = { url: `${issuesUrl}page=1&amp;per_page=1000`, json: true, headers: { Authorization: `token ${config.token}`, 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36', 'Accept': 'application/json', 'Content-Type': 'application/json;charset=UTF-8' },};let requestPostOpt = { ...requestGetOpt, url: issuesUrl, method: &quot;POST&quot;, form: &quot;&quot;,};console.log(&quot;开始初始化评论...&quot;);(async function () { console.log(&quot;开始检索链接，请稍等...&quot;); try { let urls = sitemapXmlReader(config.sitemapUrl); let directory = [&quot;/abbrlink/&quot;, &quot;/list/&quot;, &quot;/gallery/&quot;]; //筛选需初始化的链接，如不需筛选，下面这句可注释 urls = inArray(urls, directory); console.log(`共检索到${urls.length}个链接`); console.log(&quot;开始获取已经初始化的issues:&quot;); let issues = await send(requestGetOpt); console.log(`已经存在${issues.length}个issues`); let notInitIssueLinks = urls.filter((link) =&gt; { return !issues.find((item) =&gt; { link = removeProtocol(link); return item.body.includes(link); }); }); if (notInitIssueLinks.length &gt; 0) { console.log( `本次有${notInitIssueLinks.length}个链接需要初始化issue：` ); console.log(notInitIssueLinks); console.log(&quot;开始提交初始化请求, 大约需要40秒...&quot;); /** * 部署好网站后，直接执行start，新增文章并不会生成评论 * 经测试，最少需要等待40秒，才可以正确生成， 怀疑跟github的api有关系，没有找到实锤 */ setTimeout(async () =&gt; { let initRet = await notInitIssueLinks.map((item) =&gt; { send({ ...requestGetOpt, url: item }).then(data =&gt; { let $ = cheerio.load(data); let title = $('title').text(); let content = $(&quot;meta[name='description']&quot;).attr(&quot;content&quot;) let body = content ? item + &quot;\\n\\n&quot; + content : item; let pathLabel = url.parse(item).path; var md5 = crypto.createHash('md5'); var label = md5.update(pathLabel).digest('hex') let form = JSON.stringify({ labels: [config.kind, label], title: title, body: body }); //console.log(&quot;form===&quot;, form) return send({ ...requestPostOpt, form }) .then(data=&gt;{ console.log(&quot;地址: [&quot;+pathLabel+&quot;] Gitalk初始化成功&quot;) }) .catch(err=&gt;{ console.log(&quot;地址: [&quot;+pathLabel+&quot;] Gitalk初始化失败&quot;) }); }).catch(err=&gt;{ console.log(&quot;地址: &quot;+item+&quot;, 获取失败, 错误原因:&quot;) console.log(err) }); }); console.log(`已完成${initRet.length}个！`); console.log(&quot;可以愉快的发表评论了！&quot;); }, 40000); } else { console.log(&quot;本次发布无新增页面，无需初始化issue!!&quot;); } } catch (e) { console.log(`初始化issue出错，错误如下：`); console.log(e); } finally { }})();function inArray(arr, arr2) { var array3 = []; for (var i = 0; i &lt; arr.length; i++) { for (var j = 0; j &lt; arr2.length; j++) { var item = arr2[j]; if (arr[i].indexOf(item) != -1) { array3.push(arr[i]); } } } return array3;}function sitemapXmlReader(file) { let data = fs.readFileSync(file, &quot;utf8&quot;); let sitemap = xmlParser(data); return sitemap.root.children.map(function (url) { let loc = url.children.filter(function (item) { return item.name === &quot;loc&quot;; })[0]; return loc.content; });}function removeProtocol(url) { return url.substr(url.indexOf(&quot;:&quot;));}function send(options) { return new Promise(function (resolve, reject) { request(options, function (error, response, body) { if (!error) { resolve(body); } else { reject(error); } }); });} label标签除了评论标签(“Gitalk” or “Gitment”), 还有网页路径唯一标签(我这里是网页路径MD5加密作为唯一标签, 如果你的是其他加密或者就是网页路径作为唯一标签, 那就自行修改) 添加Node插件 1npm install --save cheerio request xml-parser 在自动化工作流中添加 12345 - name: Deploy run: |+ cd .initialize+ npm install+ npm run init 参考资料前有自动签到项目(大部分都GG了), 后有云编译程序, 可参考学习的资料太多了.最重要的是Github会根据你项目的语言来提供可能的Github Action模板, 写起来非常方便.","link":"/abbrlink/920264e4.html"},{"title":"记一次程序汉化过程","text":"结束了!PowerToys已经出了官方中文 记一次软件汉化的关键过程 汉化目标：PowerToys(微软小工具) 第一步：Radialix软件汉化直接汉化PowerToys.exe，FancyZonesEditor.exe(PowerToys\\modules)，ImageResizer.exe(PowerToys\\modules) 程序名称 新键本地化方案&gt;&gt;目标设置 原因 汉化对象 PowerToys.exe 创建本地化文件 托盘菜单汉化 FancyZonesEditor.exe 创建多语言本地化文件 明明本地化(创建本地化文件)成功了的，修改文件名称就失效了 程序界面汉化 ImageResizer.exe 创建本地化文件 其实也可以不汉化，因为软件自带多语言 程序界面汉化 第二步：js汉化直接使用文本编辑器进行修改bundle.js(PowerToys\\settings-html\\dist) 通过查找/替换进行汉化，不过只能汉化以部分(选项一【PowerToys General Settings(常规设置)】以及弹窗菜单)，选项一中剩下没汉化的需要其余的汉化成功后，就会被自动替换。 第三步：dll汉化修改fancyzones.dll可以汉化选项二【FancyZones Settings(多区域设置)】以及汉化选项一(参考上面)的第一项选择。 修改powerpreview.dll可以汉化选项三【File Explorer Settings(预览设置)】以及汉化选项一(参考上面)的第二项选择。 修改ImageResizerExt.dll可以汉化选项四【Image Resizer Settings(图片大小调整设置)】以及汉化选项一(参考上面)的第三项选择。 只需要汉化简体中文一项字符串即可,当然能汉化完也可以 修改PowerRenameExt.dll可以汉化选项四【PowerRename Settings(重命名设置)】以及汉化选项一(参考上面)的第四项选择。 修改shortcut_guide.dll可以汉化选项四【Shortcut Guide Settings(图片大小调整设置)】以及汉化选项一(参考上面)的第五项选择。 修改WindowWalker.dll可以汉化选项四【Window Walker Settings(名称切换窗口设置)】以及汉化选项一(参考上面)的第六项选择。 这两项非常修改量很小，就没截图 汉化展示 汉化包下载地址PowerToys 0.23.2 汉化包 and 安装包.7zPowerToys 0.23.0 汉化包 and 安装包.7zPowerToys 0.21.1汉化包+安装包.7zPowerToys 0.20.1 汉化包+安装包.7zPowerToys 0.20.0 汉化包 安装包.7zPowerToys 0.19.2汉化包+安装包.7z.zipPowerToys 0.19.1 汉化包+安装包.7zPowerToys 0.19.0汉化包+安装包.7zPowerToys 0.18.2汉化包+安装包.7zPowerToys.7zPowerToys汉化步骤.7zPowerToys 0.18.1汉化包+安装包.7zPowerToys 0.18汉化包+安装包.7zPowerToys 0.17汉化包+安装包.7zPowerToys 0.16.1汉化包.7zPowerToys 0.16.1汉化包.7z","link":"/abbrlink/92df1153.html"},{"title":"[记录]BT之家各域名","text":"不用看了, 都死掉了 BT之家官网论坛：https://www.btbtt.me/(需要FQ) 前言正所谓，有备无患。BT之家也就准备了多个域名，以备不时之需。 记录 推荐访问HTTPS的网址，这样更安全更新于：2020年02月27日 当前可用域名（HTTP）:http://www.88btbtt.comhttp://www.51btbtt.comhttp://www.52btbtt.comhttp://www.91btbtt.comhttp://www.mebtbtt.comhttp://www.btbtt.lifehttp://www.btbtt.livehttp://www.btbtt.xyz当前可用域名（HTTPS）:https://www.btbtt.ushttps://www.88btbtt.comhttps://www.51btbtt.comhttps://www.52btbtt.comhttps://www.91btbtt.comhttps://www.mebtbtt.comhttps://www.btbtt.lifehttps://www.btbtt.livehttps://www.btbtt.xyz失效域名（需FQ）:https://www.btbtt.cohttps://www.btbtt.mehttps://www.btbtt.bizhttps://www.btbtt.nethttps://www.btbtt.orghttps://www.btbtt.tophttps://www.8btbtt.comhttps://www.92btbtt.com","link":"/abbrlink/49e2ed86.html"},{"title":"论打着招聘的名义让你参加培训的公司","text":"培训机构(?)，不不不😡，说他是培训机构都是侮辱培训机构了`` 目前所接到的骗子公司均来自智联招聘 让我们开始鞭尸吧 ①成都市万息科技有限公司 我™才注册智联招聘不到1个小时 公司消息如下： 官网：http://www.wanxikeji.cn 【这骗子公司™竟然还有官网，真厉害！】 公司地址：四川省成都市武侯区益州大道北段1597号·成都高新科技孵化园区9号园区E座 法人代表：刘定武 注册资本：1000万元人民币【你没看错，就是1千万人民币】 成立时间：2003-09-22 公司规模：20-99人【03年注册的公司，整到现在20年连100人都没有】 统一信用代码：915101067528401849 HR(招聘人)之一的信息： 姓名：自称是招聘部张玲【不排除是假名】 微信号：zllgwxz【多半是公司微信号】 电话号：136-7804-6201【估计是公司的电话卡】 招聘套路如下： z：招聘 h：被招聘 z：你好，是xx（你的名字）吗？ h：是的，我是xx。 z：你现在有没有找到工作【其实她/他/它是知道你没找到工作的】。 h：没有啊，还在找。 z：我们公司看过了你的简历，符合我们公司的招聘要求，我们公司是03年创立的，我们和200多个公司都有合作，不过工作前要参加几个月的集训，集训是不收钱的，集训期间大家一起做项目，项目成了后保证得6k-8k，但要抽2k，不到6k我们不抽钱，你意下如何？【就NM吹牛皮，还6K-8K，项目成没成，还不是对方说了算，而且也没说项目不成怎么样(没成你赔钱？)】 h：可以啊! Z：我们这边在xx地址开展xx招聘会，正在招聘xx岗位和xx岗位，不知道你有没有空过来面试一下 h：有空，有空，有空 Z：那我们约个时间，不知道你明天有没空？ h：有，有，有 z：那明天上午10-10:30吧！具体信息我会发微信\\短信给你。 h：好的。 总结不要妄想天上掉馅饼 后记–这家成都市万息科技有限公司的第二次的招聘 HR(招聘人)之一的信息： 姓名：自称邓邓 微信号：DDLL2011-【昵称：叨叨】 电话：18380345313 招聘套路如下： 与之前的基本相同，都是入职前集训，有项目可以跟着做，6k-8k，抽成……巴拉巴拉 地址信息与之前的一样，都是成都高新科技孵化园区9号园区E座 总结能不能不要侮辱我的智商！ 后记–第这家成都市万息科技有限公司的第三次的招聘 HR(招聘人)之三的信息： 一号 姓名：目前已知为姓李【被二号、三号称为李老师】 微信号：muzili183881091261【昵称：木子李】 电话：183881091261 后来在11点过后我还没到【当然，我肯定不可能去的呀】，给我连打3个电话【我都挂断了的】，之后就是二号再次打电话给我【我又给挂了】，最后就是三号打来的，之后就是发生了下面的事情。 二号 电话：15881068764 这个电话就是催我去面试的，订的面试时间为第二天的11点 三号 电话：15129216471 这个电话就是在11点过后我还没到【当然，我肯定不可能去的呀】打的电话 这家公司™没得自知之明了吗？还有勇气质问我为啥没到【我就随口说了一句我堵车】，你™一个骗子公司，这么理直气壮也是没谁了。 招聘套路如下： 与之前的基本相同，都是入职前集训，有项目可以跟着做，6k-8k，抽成……巴拉巴拉 地址信息与之前的一样，都是成都高新科技孵化园区9号园区E座 总结估摸这家公司已经把我拉了黑名单了 ②四川格智网络科技有限公司公司信息如下： 官网：http://www.gezhinet.com/ 公司地址：成都市金牛区西安南路63号1幢4楼405室 法人代表：何平 注册资本：200万元人民币【看似比上一个少，但是这个何平一共当过3家公司的法人代表(如下表)】 序号 企业名称 注册资本 成立时间 地区 状态 1 四川格智网络科技有限公司 200万(元) 2012-04-25 四川省成都市金牛区 &gt; 开业 2 四川智游网络科技有限公司 1,000万(元) 2013-05-07 四川省成都市武侯区 &gt; 注销 3 四川薇朵传媒科技有限公司 500万(元) 2020-07-15 四川省成都市武侯区 开业 成立时间：2012-04-25公司规模：20-99人统一信用代码：9151010759467233XR HR(招聘人)之一信息： 电话：165-5028-5635 招聘套路如下： 比起上一个，这个就直白多了 简单来说就是问你你要不要找工作，要的话你明天就来我们这边，带上身份证、带上学历证明 都没得利诱的 总结 除非你什么技术大牛，曾经有过什么巨大的成就【公司业绩上涨30%之类的】，不然你一个应届毕业生【又不是985、211毕业】、技能又不突出、还没的什么工作经验，谁会给你一份要求低、工资高的工作。 也有例外啦，你有关系，就可以找到一份要求低、工资高的工作。 ③第九城市【成都分部？冒充？】 💡首先声明💡：我所说的第九城市不是上海那边的，是成都这边的。 地址：成都市武侯区新希望国际A座1103号 HR(招聘人)之一信息： 姓名：王姐【第九城市-王姐】 微信号：tiantian940-【昵称：👑ʚ果果ɞღ小铺๑】 电话：181-8190-1140 招聘套路如下： 没啥写的，毕竟在与HR聊完，约定好面试(了解？)时间后，我就在网上了解这家公司。 在看准网、职友集、贴吧了解了一番后，认定为骗子(培训)公司。","link":"/abbrlink/52bb8352.html"},{"title":"Translator++","text":"译者++介绍一种结合了机器翻译的便利性和手动翻译的工具 Translator++ 目前可以处理RPG Maker XP、VX、VX Ace、MV 和 Wolf RPG 编辑器引擎 界面 下载Translator++ Ver. 6.1.10下载渠道(付费): 官网 Translator++ Ver. 5.3.31下载渠道(免费): 官网 Translator++5.3.31B_i32[3b499b5f].7z Translator++5.3.31B_i32[3b499b5f].7z","link":"/abbrlink/7ad0c06.html"},{"title":"整个上半身都是奶！超工口蜘蛛女又甜又凶...想被「沉甸甸の乳量」压死：只剩幸福了","text":"今天跟大家分享这位，我完全被他的奶震慑到了 怎麽可以这麽巨大~~~ 明明就长得这麽甜，可是身材胸爆 这矛盾又和谐的画面&gt;///&lt;","link":"/abbrlink/3a1a0c34.html"}],"tags":[{"name":"电子书","slug":"电子书","link":"/tags/%E7%94%B5%E5%AD%90%E4%B9%A6/"},{"name":"教程","slug":"教程","link":"/tags/%E6%95%99%E7%A8%8B/"},{"name":"合集","slug":"合集","link":"/tags/%E5%90%88%E9%9B%86/"},{"name":"软件","slug":"软件","link":"/tags/%E8%BD%AF%E4%BB%B6/"},{"name":"破解","slug":"破解","link":"/tags/%E7%A0%B4%E8%A7%A3/"},{"name":"桌面管理","slug":"桌面管理","link":"/tags/%E6%A1%8C%E9%9D%A2%E7%AE%A1%E7%90%86/"},{"name":"Fences","slug":"Fences","link":"/tags/Fences/"},{"name":"GitHub","slug":"GitHub","link":"/tags/GitHub/"},{"name":"GitHub Desktop","slug":"GitHub-Desktop","link":"/tags/GitHub-Desktop/"},{"name":"汉化","slug":"汉化","link":"/tags/%E6%B1%89%E5%8C%96/"},{"name":"博客","slug":"博客","link":"/tags/%E5%8D%9A%E5%AE%A2/"},{"name":"Hexo","slug":"Hexo","link":"/tags/Hexo/"},{"name":"Github","slug":"Github","link":"/tags/Github/"},{"name":"下载软件","slug":"下载软件","link":"/tags/%E4%B8%8B%E8%BD%BD%E8%BD%AF%E4%BB%B6/"},{"name":"mega","slug":"mega","link":"/tags/mega/"},{"name":"不限速","slug":"不限速","link":"/tags/%E4%B8%8D%E9%99%90%E9%80%9F/"},{"name":"MegaDownloader","slug":"MegaDownloader","link":"/tags/MegaDownloader/"},{"name":"renpy游戏","slug":"renpy游戏","link":"/tags/renpy%E6%B8%B8%E6%88%8F/"},{"name":"SSH","slug":"SSH","link":"/tags/SSH/"},{"name":"虚拟机","slug":"虚拟机","link":"/tags/%E8%99%9A%E6%8B%9F%E6%9C%BA/"},{"name":"Kali LInux","slug":"Kali-LInux","link":"/tags/Kali-LInux/"},{"name":"win","slug":"win","link":"/tags/win/"},{"name":"美化","slug":"美化","link":"/tags/%E7%BE%8E%E5%8C%96/"},{"name":"搜索框","slug":"搜索框","link":"/tags/%E6%90%9C%E7%B4%A2%E6%A1%86/"},{"name":"hexo-theme-matery","slug":"hexo-theme-matery","link":"/tags/hexo-theme-matery/"},{"name":"主题","slug":"主题","link":"/tags/%E4%B8%BB%E9%A2%98/"},{"name":"优化","slug":"优化","link":"/tags/%E4%BC%98%E5%8C%96/"},{"name":"hexo","slug":"hexo","link":"/tags/hexo/"},{"name":"杂货铺","slug":"杂货铺","link":"/tags/%E6%9D%82%E8%B4%A7%E9%93%BA/"},{"name":"分享站","slug":"分享站","link":"/tags/%E5%88%86%E4%BA%AB%E7%AB%99/"},{"name":"学习","slug":"学习","link":"/tags/%E5%AD%A6%E4%B9%A0/"},{"name":"小米路由器","slug":"小米路由器","link":"/tags/%E5%B0%8F%E7%B1%B3%E8%B7%AF%E7%94%B1%E5%99%A8/"},{"name":"POST分析","slug":"POST分析","link":"/tags/POST%E5%88%86%E6%9E%90/"},{"name":"影视","slug":"影视","link":"/tags/%E5%BD%B1%E8%A7%86/"},{"name":"百度云","slug":"百度云","link":"/tags/%E7%99%BE%E5%BA%A6%E4%BA%91/"},{"name":"wp主题","slug":"wp主题","link":"/tags/wp%E4%B8%BB%E9%A2%98/"},{"name":"刷机","slug":"刷机","link":"/tags/%E5%88%B7%E6%9C%BA/"},{"name":"三星","slug":"三星","link":"/tags/%E4%B8%89%E6%98%9F/"},{"name":"SM-C5000","slug":"SM-C5000","link":"/tags/SM-C5000/"},{"name":"GALAXY C5","slug":"GALAXY-C5","link":"/tags/GALAXY-C5/"},{"name":"FileCentipede","slug":"FileCentipede","link":"/tags/FileCentipede/"},{"name":"激活","slug":"激活","link":"/tags/%E6%BF%80%E6%B4%BB/"},{"name":"斐讯K2","slug":"斐讯K2","link":"/tags/%E6%96%90%E8%AE%AFK2/"},{"name":"救砖","slug":"救砖","link":"/tags/%E6%95%91%E7%A0%96/"},{"name":"甩锅","slug":"甩锅","link":"/tags/%E7%94%A9%E9%94%85/"},{"name":"有趣的项目","slug":"有趣的项目","link":"/tags/%E6%9C%89%E8%B6%A3%E7%9A%84%E9%A1%B9%E7%9B%AE/"},{"name":"软件汉化","slug":"软件汉化","link":"/tags/%E8%BD%AF%E4%BB%B6%E6%B1%89%E5%8C%96/"},{"name":"微软小工具","slug":"微软小工具","link":"/tags/%E5%BE%AE%E8%BD%AF%E5%B0%8F%E5%B7%A5%E5%85%B7/"},{"name":"PowerToys","slug":"PowerToys","link":"/tags/PowerToys/"},{"name":"域名备份","slug":"域名备份","link":"/tags/%E5%9F%9F%E5%90%8D%E5%A4%87%E4%BB%BD/"},{"name":"招聘","slug":"招聘","link":"/tags/%E6%8B%9B%E8%81%98/"},{"name":"骗子","slug":"骗子","link":"/tags/%E9%AA%97%E5%AD%90/"},{"name":"杂谈","slug":"杂谈","link":"/tags/%E6%9D%82%E8%B0%88/"},{"name":"唠叨","slug":"唠叨","link":"/tags/%E5%94%A0%E5%8F%A8/"},{"name":"游戏翻译","slug":"游戏翻译","link":"/tags/%E6%B8%B8%E6%88%8F%E7%BF%BB%E8%AF%91/"},{"name":"Translator++","slug":"Translator","link":"/tags/Translator/"},{"name":"RPG Maker","slug":"RPG-Maker","link":"/tags/RPG-Maker/"},{"name":"VX","slug":"VX","link":"/tags/VX/"},{"name":"VX Ace","slug":"VX-Ace","link":"/tags/VX-Ace/"},{"name":"MV","slug":"MV","link":"/tags/MV/"},{"name":"Wolf RPG","slug":"Wolf-RPG","link":"/tags/Wolf-RPG/"},{"name":"Ren&#39;Py","slug":"Ren-Py","link":"/tags/Ren-Py/"},{"name":"资源","slug":"资源","link":"/tags/%E8%B5%84%E6%BA%90/"},{"name":"福利资源","slug":"福利资源","link":"/tags/%E7%A6%8F%E5%88%A9%E8%B5%84%E6%BA%90/"},{"name":"写真","slug":"写真","link":"/tags/%E5%86%99%E7%9C%9F/"}],"categories":[{"name":"uncategorized","slug":"uncategorized","link":"/categories/uncategorized/"},{"name":"软件","slug":"软件","link":"/categories/%E8%BD%AF%E4%BB%B6/"},{"name":"多彩生活","slug":"多彩生活","link":"/categories/%E5%A4%9A%E5%BD%A9%E7%94%9F%E6%B4%BB/"},{"name":"收集癖","slug":"收集癖","link":"/categories/%E6%94%B6%E9%9B%86%E7%99%96/"},{"name":"Github","slug":"Github","link":"/categories/Github/"},{"name":"自动化","slug":"自动化","link":"/categories/%E8%87%AA%E5%8A%A8%E5%8C%96/"},{"name":"美女","slug":"美女","link":"/categories/%E7%BE%8E%E5%A5%B3/"}],"pages":[{"title":"404","text":"","link":"/404/index.html"},{"title":"关于我的一些事","text":":D 获取中... 个人简介善恶终有报,天道好轮回。不信抬头看,苍天饶过谁。无论何时何地，我们都要保持一颗积极乐观、善良感恩的心。但行好事莫问前程，永远年轻，永远热内盈眶，永远保持正能量。💪💪💪💪💪💪冲鸭！！！！ 个人信息：计算机科学与技术专业从事WEB前端开发码畜一枚坚信代码改变世界 博客信息 网站采用的butterfly主题 追求尽可能的简洁，清晰，易用。 在butterfly主题之上进行了部分修改。","link":"/about/index.html"},{"title":"分类","text":"","link":"/categories/index.html"},{"title":"友链","text":"loadQexoFriends(\"qexo-friends\", \"https://admin.xn--fjqz24b.cn.eu.org\"); qexo_friend_api(\"friends-api\", \"https://admin.xn--fjqz24b.cn.eu.org\");","link":"/friends/index.html"},{"title":"标签","text":"","link":"/tags/index.html"},{"title":"说说","text":"const qexo_url = \"https://admin.xn--fjqz24b.cn.eu.org\" showQexoTalks(\"qexot\", qexo_url, 5)","link":"/talks/index.html"},{"title":"","text":"(function(a,h,g,f,e,d,c,b){b=function(){d=h.createElement(g);c=h.getElementsByTagName(g)[0];d.src=e;d.charset=\"utf-8\";d.async=1;c.parentNode.insertBefore(d,c)};a[\"SeniverseWeatherWidgetObject\"]=f;a[f]||(a[f]=function(){(a[f].q=a[f].q||[]).push(arguments)});a[f].l=+new Date();if(a.attachEvent){a.attachEvent(\"onload\",b)}else{a.addEventListener(\"load\",b,false)}}(window,document,\"script\",\"SeniverseWeatherWidget\",\"//cdn.sencdn.com/widget2/static/js/bundle.js?t=\"+parseInt((new Date().getTime() / 100000000).toString(),10))); window.SeniverseWeatherWidget('show', { flavor: \"bubble\", location: \"WS0E9D8WN298\", geolocation: true, language: \"zh-Hans\", unit: \"c\", theme: \"auto\", token: \"a579c7ea-507d-41d7-b578-3537882d20c2\", hover: \"enabled\", container: \"tp-weather-widget\" }) const weather = document.querySelector(\"#tp-weather-widget\") setInterval(()=>{ if(window.innerWidth < 1000) { if(typeof weather.childNodes[0] !== \"undefined\") { weather.childNodes[0].style.display = \"none\"; } }else{ if(typeof weather.childNodes[0] !== \"undefined\") { weather.childNodes[0].style.display = \"block\"; weather.childNodes[0].style.zIndex = 999; } } }, 1000)","link":"/resource/custom/footer.html"},{"title":"","text":"jinrishici.load((result) => { let jrsc = document.getElementById('jrsc'); const data = result.data; let author = data.origin.author; let title = '《' + data.origin.title + '》'; let content = data.content.substr(0, data.content.length - 1); let dynasty = data.origin.dynasty.substr(0, data.origin.dynasty.length - 1); jrsc.innerText = content + ' @ ' + dynasty + '·' + author + title; }); 正在加载今日诗词....","link":"/resource/custom/post-body-end.html"},{"title":"","text":"","link":"/resource/custom/sidebar.html"},{"title":"","text":"/* 设置博客背景 */ body { background-image: url(\"/resource/img/background.png\"); } /* 添加 昼夜切换按钮 样式 */ button.darkmode-toggle { width: 2rem; height: 2rem; left: -1rem; opacity: 0.3; } button.darkmode-toggle:hover { left: 0; opacity: 1; } button.darkmode-toggle:before, button.darkmode-toggle:after { background-color: #333; } button.darkmode-toggle:before { top: 5px; } button.darkmode-toggle:after { bottom: 5px; }","link":"/resource/custom/styles.css"},{"title":"","text":"var digit=[[[0,0,1,1,1,0,0],[0,1,1,0,1,1,0],[1,1,0,0,0,1,1],[1,1,0,0,0,1,1],[1,1,0,0,0,1,1],[1,1,0,0,0,1,1],[1,1,0,0,0,1,1],[1,1,0,0,0,1,1],[0,1,1,0,1,1,0],[0,0,1,1,1,0,0],],[[0,0,0,1,1,0,0],[0,1,1,1,1,0,0],[0,0,0,1,1,0,0],[0,0,0,1,1,0,0],[0,0,0,1,1,0,0],[0,0,0,1,1,0,0],[0,0,0,1,1,0,0],[0,0,0,1,1,0,0],[0,0,0,1,1,0,0],[1,1,1,1,1,1,1],],[[0,1,1,1,1,1,0],[1,1,0,0,0,1,1],[0,0,0,0,0,1,1],[0,0,0,0,1,1,0],[0,0,0,1,1,0,0],[0,0,1,1,0,0,0],[0,1,1,0,0,0,0],[1,1,0,0,0,0,0],[1,1,0,0,0,1,1],[1,1,1,1,1,1,1],],[[1,1,1,1,1,1,1],[0,0,0,0,0,1,1],[0,0,0,0,1,1,0],[0,0,0,1,1,0,0],[0,0,1,1,1,0,0],[0,0,0,0,1,1,0],[0,0,0,0,0,1,1],[0,0,0,0,0,1,1],[1,1,0,0,0,1,1],[0,1,1,1,1,1,0],],[[0,0,0,0,1,1,0],[0,0,0,1,1,1,0],[0,0,1,1,1,1,0],[0,1,1,0,1,1,0],[1,1,0,0,1,1,0],[1,1,1,1,1,1,1],[0,0,0,0,1,1,0],[0,0,0,0,1,1,0],[0,0,0,0,1,1,0],[0,0,0,1,1,1,1],],[[1,1,1,1,1,1,1],[1,1,0,0,0,0,0],[1,1,0,0,0,0,0],[1,1,1,1,1,1,0],[0,0,0,0,0,1,1],[0,0,0,0,0,1,1],[0,0,0,0,0,1,1],[0,0,0,0,0,1,1],[1,1,0,0,0,1,1],[0,1,1,1,1,1,0],],[[0,0,0,0,1,1,0],[0,0,1,1,0,0,0],[0,1,1,0,0,0,0],[1,1,0,0,0,0,0],[1,1,0,1,1,1,0],[1,1,0,0,0,1,1],[1,1,0,0,0,1,1],[1,1,0,0,0,1,1],[1,1,0,0,0,1,1],[0,1,1,1,1,1,0],],[[1,1,1,1,1,1,1],[1,1,0,0,0,1,1],[0,0,0,0,1,1,0],[0,0,0,0,1,1,0],[0,0,0,1,1,0,0],[0,0,0,1,1,0,0],[0,0,1,1,0,0,0],[0,0,1,1,0,0,0],[0,0,1,1,0,0,0],[0,0,1,1,0,0,0],],[[0,1,1,1,1,1,0],[1,1,0,0,0,1,1],[1,1,0,0,0,1,1],[1,1,0,0,0,1,1],[0,1,1,1,1,1,0],[1,1,0,0,0,1,1],[1,1,0,0,0,1,1],[1,1,0,0,0,1,1],[1,1,0,0,0,1,1],[0,1,1,1,1,1,0],],[[0,1,1,1,1,1,0],[1,1,0,0,0,1,1],[1,1,0,0,0,1,1],[1,1,0,0,0,1,1],[0,1,1,1,0,1,1],[0,0,0,0,0,1,1],[0,0,0,0,0,1,1],[0,0,0,0,1,1,0],[0,0,0,1,1,0,0],[0,1,1,0,0,0,0],],[[0,0,0,0,0,0,0],[0,0,1,1,1,0,0],[0,0,1,1,1,0,0],[0,0,1,1,1,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,1,1,1,0,0],[0,0,1,1,1,0,0],[0,0,1,1,1,0,0],[0,0,0,0,0,0,0],],];function renderCanvas(selector){var canvas=document.querySelector(selector);if(canvas.getContext){var cxt=canvas.getContext(\"2d\");var H=100,W=700;canvas.height=H;canvas.width=W;cxt.fillStyle=\"#f00\";cxt.fillRect(10,10,50,50);var data=[];var balls=[];var R=canvas.height/20-1;(function(){var temp=/(\\d)(\\d):(\\d)(\\d):(\\d)(\\d)/.exec(new Date());data.push(temp[1],temp[2],10,temp[3],temp[4],10,temp[5],temp[6])})();function renderDigit(index,num){for(var i=0;i","link":"/resource/js/particle_clock.js"}]}